.TH "StackOnSteroids/StackRigid.h" 3 "Fri Oct 9 2020" "StackRigid" \" -*- nroff -*-
.ad l
.nh
.SH NAME
StackOnSteroids/StackRigid.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include 'PointerChecks\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__overload\fP(FUNC)   \fBEVALUATOR\fP(FUNC, \fBStackElementType\fP)"
.br
.ti -1c
.RI "#define \fBEVALUATOR\fP(x,  y)   \fBPASTER\fP(x,y)"
.br
.ti -1c
.RI "#define \fBPASTER\fP(x,  y)   x ## _ ## y"
.br
.ti -1c
.RI "#define \fBStackDumpWrapper\fP(stack)   { \fBStackDump\fP(stack, __LINE__, __FILE__, ''); }"
.br
.ti -1c
.RI "#define \fBStackDumpWrapperWhy\fP(stack,  why)   { \fBStackDump\fP(stack, __LINE__, __FILE__, why); }"
.br
.ti -1c
.RI "#define \fBStackElementDump\fP(FILE,  VALUE)   {fprintf(FILE, '%d', VALUE);}"
.br
.RI "Default element dump instruction\&. "
.ti -1c
.RI "#define \fBStackElementType\fP   int"
.br
.RI "By default, it will be stack of ints\&. "
.ti -1c
.RI "#define \fBStackRigid_h\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBStackRigidOperationCodes\fP \fBStackRigidOperationCodes\fP"
.br
.RI "Codes returned after operations on Stack\&. "
.ti -1c
.RI "typedef enum \fBStackRigidState\fP \fBStackRigidState\fP"
.br
.RI "Codes characterizing Stack state\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBStackRigidOperationCodes\fP { \fBSTACK_OP_OK\fP, \fBSTACK_OP_UNDERFLOW\fP, \fBSTACK_OP_OVERFLOW\fP, \fBSTACK_OP_NOMEMORY\fP, \fBSTACK_OP_INTEGRITYERR\fP, \fBSTACK_OP_NULL\fP, \fBSTACK_OP_PTRINVALID\fP }"
.br
.RI "Codes returned after operations on Stack\&. "
.ti -1c
.RI "enum \fBStackRigidState\fP { \fBSTACK_ST_OK\fP, \fBSTACK_ST_INTEGRITYERR\fP, \fBSTACK_ST_UNINITIALIZED\fP, \fBSTACK_ST_NULL\fP }"
.br
.RI "Codes characterizing Stack state\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fB__overload\fP (StackRigid) = ( __overload(StackRigid)*)calloc(\fBmemory\fP, 1)"
.br
.RI "The main StackRigid struct\&. "
.ti -1c
.RI "static uint32_t \fB__StackGetChecksum\fP (\fB__overload\fP(StackRigid) *stack)"
.br
.RI "Claculates big Stack checksum\&. Uses Adler-32 method\&. "
.ti -1c
.RI "static uint32_t \fB__StackGetChecksumVital\fP (\fB__overload\fP(StackRigid) *stack)"
.br
.RI "Uses Adler-32 method\&. Calculates Stack checksum only for the vital parameters\&. This is necessary because \fB__StackGetChecksum()\fP relies on capacity and size\&. If they were changed, behaviour is undefined\&. "
.ti -1c
.RI "static \fBStackRigidOperationCodes\fP \fB__StackReallocate\fP (\fB__overload\fP(StackRigid) **stack, short int direction)"
.br
.RI "Reallocates Stack if needed\&. "
.ti -1c
.RI "static void \fB__StackUpdateChecksum\fP (\fB__overload\fP(StackRigid) *stack)"
.br
.RI "Updates Stack checksums\&. Does not take into account bytes inside the stack but outside of its last element\&. "
.ti -1c
.RI "\fB__StackUpdateChecksum\fP (\fBpointer\fP)"
.br
.ti -1c
.RI "static uint32_t \fBadlerChecksum\fP (const void *firstBlock, size_t len)"
.br
.RI "Calculates Adler-32 checksum from the firstBlock to the firstBlock + len\&. "
.ti -1c
.RI "\fBif\fP (!istack_pointer_valid(\fBlogFile\fP, sizeof(\fBlogFile\fP)))"
.br
.ti -1c
.RI "\fBif\fP (!istack_pointer_valid(\fBpointer\fP, sizeof(\fBpointer\fP)))"
.br
.ti -1c
.RI "\fBif\fP (\fBadded\fP< \fBmemory\fP)"
.br
.ti -1c
.RI "\fBStackRigidOperationCodes\fP \fBStackBack\fP (\fB__overload\fP(StackRigid) *stack, \fBStackElementType\fP *value)"
.br
.RI "Free stack memory\&. "
.ti -1c
.RI "\fBStackRigidOperationCodes\fP \fBStackDestruct\fP (\fB__overload\fP(StackRigid) **stack)"
.br
.RI "Free stack memory\&. "
.ti -1c
.RI "void \fBStackDump\fP (\fB__overload\fP(StackRigid) *stack, const int line, const char *file, const char *why)"
.br
.RI "Dumps debug information about the stack\&. "
.ti -1c
.RI "\fBStackRigidOperationCodes\fP \fBStackPop\fP (\fB__overload\fP(StackRigid) **stack, \fBStackElementType\fP *value)"
.br
.RI "Pop value from the end of the stack The operation can perform reallocations if there is too much space\&. "
.ti -1c
.RI "\fBStackRigidOperationCodes\fP \fBStackPush\fP (\fB__overload\fP(StackRigid) **stack, \fBStackElementType\fP value)"
.br
.RI "Push the value to the stack The operation can perform reallocations if there is not enough space\&. "
.ti -1c
.RI "size_t \fBStackRigidMemoryUse\fP (\fB__overload\fP(StackRigid) *stack)"
.br
.RI "Memory alocated for the Stack\&. "
.ti -1c
.RI "\fBStackRigidState\fP \fBStackValidate\fP (\fB__overload\fP(StackRigid) *stack)"
.br
.RI "Perform all stack checks: checksums, general constrains\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "size_t \fBadded\fP = \fBmemory\fP + (\fBcapacity\fP \- 1) * sizeof(\fBStackElementType\fP)"
.br
.ti -1c
.RI "\fBpointer\fP \fBcapacity\fP = capacity"
.br
.ti -1c
.RI "\fBpointer\fP \fBcheckSum\fP = 0"
.br
.ti -1c
.RI "\fBpointer\fP \fBcheckSumVital\fP = 0"
.br
.ti -1c
.RI "FILE * \fBlogFile\fP"
.br
.ti -1c
.RI "size_t \fBmemory\fP = sizeof( \fB__overload\fP(StackRigid))"
.br
.ti -1c
.RI "return \fBpointer\fP"
.br
.ti -1c
.RI "\fBpointer\fP \fBsize\fP = 0"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __overload(FUNC)   \fBEVALUATOR\fP(FUNC, \fBStackElementType\fP)"

.SS "#define EVALUATOR(x, y)   \fBPASTER\fP(x,y)"

.SS "#define PASTER(x, y)   x ## _ ## y"

.SS "#define StackDumpWrapper(stack)   { \fBStackDump\fP(stack, __LINE__, __FILE__, ''); }"

.SS "#define StackDumpWrapperWhy(stack, why)   { \fBStackDump\fP(stack, __LINE__, __FILE__, why); }"

.SS "#define StackElementDump(FILE, VALUE)   {fprintf(FILE, '%d', VALUE);}"

.PP
Default element dump instruction\&. 
.SS "#define StackElementType   int"

.PP
By default, it will be stack of ints\&. 
.SS "#define StackRigid_h"

.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBStackRigidOperationCodes\fP \fBStackRigidOperationCodes\fP"

.PP
Codes returned after operations on Stack\&. 
.SS "typedef enum \fBStackRigidState\fP \fBStackRigidState\fP"

.PP
Codes characterizing Stack state\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBStackRigidOperationCodes\fP"

.PP
Codes returned after operations on Stack\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTACK_OP_OK \fP\fP
Succesful operation\&. 
.TP
\fB\fISTACK_OP_UNDERFLOW \fP\fP
Tried to get value from the empty stack\&. 
.TP
\fB\fISTACK_OP_OVERFLOW \fP\fP
Stack overflow and new memory allocation failed\&. 
.TP
\fB\fISTACK_OP_NOMEMORY \fP\fP
No memory for stack alocations\&. 
.TP
\fB\fISTACK_OP_INTEGRITYERR \fP\fP
Stack memory was altered by some outer access\&. 
.TP
\fB\fISTACK_OP_NULL \fP\fP
Found NULL pointer during the operation\&. 
.TP
\fB\fISTACK_OP_PTRINVALID \fP\fP
Found invalid pointer during the operation\&. 
.PP
.nf
67                                      {
69     STACK_OP_OK,
70 
72     STACK_OP_UNDERFLOW,
73 
75     STACK_OP_OVERFLOW,
76 
78     STACK_OP_NOMEMORY,
79 
81     STACK_OP_INTEGRITYERR,
82 
84     STACK_OP_NULL,
85 
87     STACK_OP_PTRINVALID
88 } StackRigidOperationCodes;
.fi
.SS "enum \fBStackRigidState\fP"

.PP
Codes characterizing Stack state\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTACK_ST_OK \fP\fP
Stack is running as expected\&. 
.TP
\fB\fISTACK_ST_INTEGRITYERR \fP\fP
Stack was altered by some outer access\&. 
.TP
\fB\fISTACK_ST_UNINITIALIZED \fP\fP
Stack is uninitialized\&. 
.TP
\fB\fISTACK_ST_NULL \fP\fP
Found NULL pointer during the operation\&. 
.PP
.nf
94                             {
96     STACK_ST_OK,
97 
99     STACK_ST_INTEGRITYERR,
100 
102     STACK_ST_UNINITIALIZED,
103 
105     STACK_ST_NULL
106 } StackRigidState;
.fi
.SH "Function Documentation"
.PP 
.SS "__overload (StackRigid) = ( __overload(StackRigid)*)calloc(\fBmemory\fP, 1)"

.PP
The main StackRigid struct\&. Create new stack with pre-defined capacity\&.
.PP
\fBParameters\fP
.RS 4
\fIcapacity\fP initial stack capacity\&. Set to 0 if you want the stack to adopt automaticaly\&. 
.br
\fIlogFile\fP file for logging 
.RE
.PP
\fBReturns\fP
.RS 4
new stack pointer or NULL if impossible 
.RE
.PP

.PP
.nf
132                               {
133     uint32_t checkSum;
134     uint32_t checkSumVital;
135     size_t capacity;
136     size_t size;
137     FILE* logFile;
138     StackElementType data[1];
139 };
.fi
.SS "static uint32_t __StackGetChecksum (\fB__overload\fP(StackRigid) * stack)\fC [static]\fP"

.PP
Claculates big Stack checksum\&. Uses Adler-32 method\&. 
.PP
\fBAttention\fP
.RS 4
Not for the manual use! 
.PP
.nf
* Stack memory : [ checkSum checkSumVital capacity size logFile | value 1, value 2, ..., value n || ___garbage area___]
* Release:
* ________________from here ^__________________________________________________________^to here
* Debug:
* ________________from here ^______________________________________________________________________________^to here
* 
.fi
.PP
 
.RE
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack that checksums are needed to be updated 
.RE
.PP

.PP
.nf
412                                                                    {
413     assert(stack);
414     
415     void* firstBlock = (char*)stack + sizeof(stack->checkSum);
416     
417     // Memory used by Stack excluding checkSum and free space
418     #ifndef DEBUG
419         const size_t memory = StackRigidMemoryUse(stack) - sizeof(stack->checkSum) - (stack->capacity - stack->size) * sizeof(StackElementType);
420     #endif
421     #ifdef DEBUG
422         const size_t memory = StackRigidMemoryUse(stack) - sizeof(stack->checkSum);
423     #endif
424     
425     if (stack->size > stack->capacity) {
426         return 0;
427     }
428     return adlerChecksum(firstBlock, memory);
429 }
.fi
.PP
References adlerChecksum(), memory, StackElementType, and StackRigidMemoryUse()\&.
.PP
Referenced by __StackUpdateChecksum(), and StackValidate()\&.
.SS "static uint32_t __StackGetChecksumVital (\fB__overload\fP(StackRigid) * stack)\fC [static]\fP"

.PP
Uses Adler-32 method\&. Calculates Stack checksum only for the vital parameters\&. This is necessary because \fB__StackGetChecksum()\fP relies on capacity and size\&. If they were changed, behaviour is undefined\&. 
.PP
\fBAttention\fP
.RS 4
Not for the manual use!
.RE
.PP
.PP
.nf
* Stack memory : [ checkSum checkSumVital capacity size logFile | value 1, value 2, ..., value n || ___garbage area___]
* ______________________________from here ^__________________^to here
* .fi
.PP
 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack that checksums are needed to be updated 
.RE
.PP

.PP
.nf
399                                                                         {
400     assert(stack);
401     
402     void* firstBlock = (char*)stack + sizeof(stack->checkSum) + sizeof(stack->checkSumVital);
403     
404     const size_t memory = (size_t)((char*)(stack->data) - (char*)firstBlock);
405     if (stack->size > stack->capacity) {
406         return 0;
407     }
408     return adlerChecksum(firstBlock, memory);
409 }
.fi
.PP
References adlerChecksum(), and memory\&.
.PP
Referenced by __StackUpdateChecksum(), and StackValidate()\&.
.SS "static \fBStackRigidOperationCodes\fP __StackReallocate (\fB__overload\fP(StackRigid) ** stack, short int direction)\fC [static]\fP"

.PP
Reallocates Stack if needed\&. 
.PP
\fBAttention\fP
.RS 4
Not for the manual use! 
.RE
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be reallocated 
.br
\fIdirection\fP which direction reallocations are available\&. > 0 -> expand space if needed, < 0 -> shrink space if needed 
.RE
.PP

.PP
.nf
432                                                                                                         {
433     if ((*stack)->capacity == 0) {
434         (*stack)->capacity = 16; // capacity if was 0
435         
436         const size_t memory = StackRigidMemoryUse(*stack);
437         
438          __overload(StackRigid)* newStack = ( __overload(StackRigid)*) realloc((*stack), memory);
439         if (!istack_pointer_valid(newStack, sizeof(newStack)))
440             return STACK_OP_NOMEMORY;
441         
442         (*stack) = newStack;
443     }else if(((*stack)->capacity <= (*stack)->size) && direction > 0) { // Up reallocation
444         size_t newCapacity = (*stack)->size * 2;
445         
446         if (newCapacity <= (*stack)->size) { //   If we exceeded size_t range
447             newCapacity = (*stack)->size + 16; // Try to add 16 free spaces
448             if (newCapacity < (*stack)->size) //  Even if in this case we still exceed size_t
449                 return STACK_OP_OVERFLOW;
450         }
451         
452         const size_t memoryNow = StackRigidMemoryUse(*stack);
453         const size_t memoryNew = sizeof(__overload(StackRigid)) + (newCapacity - 1) * sizeof(StackElementType);
454         
455         if (memoryNew >= memoryNow) {
456              __overload(StackRigid)* newStack = ( __overload(StackRigid)*) realloc((*stack), memoryNew);
457             if (!istack_pointer_valid(newStack, sizeof(newStack)))
458                 return STACK_OP_NOMEMORY;
459             
460             (*stack) = newStack;
461         }else{
462             return STACK_OP_OVERFLOW; // Exceded size_t memory
463         }
464         (*stack)->capacity = newCapacity;
465         
466     }else if (((*stack)->capacity / 2\&.2 > (*stack)->size) && direction < 0) { // Down reallocation
467         size_t newCapacity = (*stack)->capacity / 2\&.2;
468         
469         const size_t memoryNow = StackRigidMemoryUse(*stack);
470         const size_t memoryNew = sizeof(__overload(StackRigid)) + (newCapacity - 1) * sizeof(StackElementType);
471         
472         if (memoryNew <= memoryNow) {
473              __overload(StackRigid)* newStack = ( __overload(StackRigid)*) realloc((*stack), memoryNew);
474             if (!istack_pointer_valid(newStack, sizeof(newStack)))
475                 return STACK_OP_NOMEMORY;
476             
477             (*stack) = newStack;
478             (*stack)->capacity = newCapacity;
479         }else
480             return STACK_OP_OVERFLOW; // Exceded size_t memory
481     }
482     return STACK_OP_OK;
483 }
.fi
.PP
References __overload, memory, STACK_OP_NOMEMORY, STACK_OP_OK, STACK_OP_OVERFLOW, StackElementType, and StackRigidMemoryUse()\&.
.PP
Referenced by StackPop(), and StackPush()\&.
.SS "static void __StackUpdateChecksum (\fB__overload\fP(StackRigid) * stack)\fC [static]\fP"

.PP
Updates Stack checksums\&. Does not take into account bytes inside the stack but outside of its last element\&. 
.PP
\fBAttention\fP
.RS 4
Not for the manual use! 
.PP
.nf
* Stack memory :  [ __stack area__ | value 1, value 2, ..., value n || ___garbage area___]
* ____________________________________________________________________^ alterations in this area are not checked
* 
.fi
.PP
 
.RE
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack that checksums are needed to be updated 
.RE
.PP

.PP
.nf
390                                                                   {
391     assert(stack);
392     #ifndef IGNORE_VALIDITY
393         stack->checkSumVital = __StackGetChecksumVital(stack);
394         stack->checkSum      = __StackGetChecksum(stack);
395     #endif
396 }
.fi
.PP
References __StackGetChecksum(), and __StackGetChecksumVital()\&.
.PP
Referenced by StackPop(), and StackPush()\&.
.SS "__StackUpdateChecksum (\fBpointer\fP)"

.SS "static uint32_t adlerChecksum (const void * firstBlock, size_t len)\fC [static]\fP"

.PP
Calculates Adler-32 checksum from the firstBlock to the firstBlock + len\&. 
.PP
\fBAttention\fP
.RS 4
Not for the manual use! 
.RE
.PP
\fBParameters\fP
.RS 4
\fIfirstBlock\fP first block to include to the checksum 
.br
\fIlen\fP length of byte sequence 
.RE
.PP
\fBReturns\fP
.RS 4
checksum 
.RE
.PP

.PP
.nf
116                                                                   {
117     uint32_t a = 1, b = 0;
118     const uint32_t MOD_ADLER = 65521;
119     for (size_t index = 0; index < len; ++index) {
120         a = (a + ((unsigned char*)firstBlock)[index]) % MOD_ADLER;
121         b = (b + a) % MOD_ADLER;
122     }
123     return (b << 16) | a;
124 }
.fi
.PP
Referenced by __StackGetChecksum(), and __StackGetChecksumVital()\&.
.SS "if (! istack_pointer_validlogFile, sizeof(logFile))"

.PP
.nf
302                                                           {
303          return NULL;
304      }
.fi
.SS "if (! istack_pointer_validpointer, sizeof(pointer))"

.PP
.nf
309                                                          {
310         return NULL;
311     }
.fi
.SS "if ()"

.PP
.nf
299                          {
300          return NULL;
301      }
.fi
.SS "\fBStackRigidOperationCodes\fP StackBack (\fB__overload\fP(StackRigid) * stack, \fBStackElementType\fP * value)"

.PP
Free stack memory\&. 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be used 
.RE
.PP
\fBReturns\fP
.RS 4
the outcome of the operation 
.RE
.PP

.PP
.nf
349                                                                                            {
350     if (!istack_pointer_valid(stack, sizeof(stack)))
351         return STACK_OP_NULL;
352     
353     
354     StackRigidState integrityChecks = StackValidate(stack);
355     
356     if (integrityChecks != STACK_ST_OK) {
357         StackDumpWrapperWhy(stack, "StackBack operation spotted integrity error");
358         return STACK_OP_INTEGRITYERR;
359     }
360     
361     if(stack->size == 0)
362         return STACK_OP_UNDERFLOW;
363     
364     *value = stack->data[stack->size - 1];
365     return STACK_OP_OK;
366 }
.fi
.PP
References STACK_OP_INTEGRITYERR, STACK_OP_NULL, STACK_OP_OK, STACK_OP_UNDERFLOW, STACK_ST_OK, StackDumpWrapperWhy, and StackValidate()\&.
.SS "\fBStackRigidOperationCodes\fP StackDestruct (\fB__overload\fP(StackRigid) ** stack)"

.PP
Free stack memory\&. 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be distructed 
.RE
.PP
\fBReturns\fP
.RS 4
the outcome of the operation 
.RE
.PP

.PP
.nf
583                                                                         {
584     if (!istack_pointer_valid(stack, sizeof(stack))) {
585         return STACK_OP_NULL;
586     }
587     if (!istack_pointer_valid(*stack, sizeof(*stack))) {
588         return STACK_OP_NULL;
589     }
590     StackRigidState checks = StackValidate(*stack);
591     if (checks == STACK_ST_OK){
592         const size_t memoryNow = StackRigidMemoryUse(*stack);
593         for(char* cursor = (char*)(*stack); cursor < (char*)(*stack) + memoryNow; cursor++)
594             *cursor = 0;
595     }
596     free(*stack);
597     return STACK_OP_OK;
598 }
.fi
.PP
References STACK_OP_NULL, STACK_OP_OK, STACK_ST_OK, StackRigidMemoryUse(), and StackValidate()\&.
.PP
Referenced by main()\&.
.SS "void StackDump (\fB__overload\fP(StackRigid) * stack, const int line, const char * file, const char * why)"

.PP
Dumps debug information about the stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be dumped 
.RE
.PP

.PP
.nf
491                                                                                                   {
492     time_t rawtime = time(NULL);
493     struct tm *ptm = localtime(&rawtime);
494     
495     if (!istack_pointer_valid(stack, sizeof(stack))){
496         fprintf(stdin, "\nStack dump is impossible: NULL pointer\n");
497         return;
498     }
499     
500     FILE* output = stack->logFile;
501     if (!istack_pointer_valid(output, sizeof(output))) {
502         output = stdout;
503         printf("\nWarning! Specified dump output is inavailbale! Selecting stdout\&.\n");
504     }
505     
506     fprintf(output, "=================================\n");
507     fprintf(output, "Stack dump %s", asctime(ptm));
508     fprintf(output, "Line: %d\nFile: %s\n", line, file);
509     if (why[0] != '\0')
510     fprintf(output, "Problem: %s\n", why);
511     
512     if (istack_pointer_valid(stack, sizeof(stack))) {
513         fprintf(output, "Stack (");
514         const char *status = "ok";
515         StackRigidState checks = StackValidate(stack);
516         switch (checks) {
517             case STACK_ST_INTEGRITYERR:
518                 status = "INTEGRITY ERROR SPOTTED";
519                 break;
520             case STACK_ST_UNINITIALIZED:
521                 status = "UNINITIALIZED";
522                 break;
523             case STACK_ST_OK:
524                 status = "ok";
525                 break;
526             case STACK_ST_NULL:
527                 status = "NULL POINTER";
528                 break;
529         }
530         fprintf(output, "%s", status);
531         fprintf(output, ")");
532         fprintf(output, " [%p]: {\n", stack);
533         if (checks != STACK_ST_OK) {
534             fprintf(output, "ERROR! Stack structure was corrupted\&.\nThe data below was changed from the outside\&.\nThis can fail!\n");
535         }
536         fprintf(output, "\t         size : %lu\n", stack->size);
537         fprintf(output, "\t     capacity : %lu\n", stack->capacity);
538         fprintf(output, "\t     checkSum : %x\n", stack->checkSumVital);
539         fprintf(output, "\tcheckSumVital : %x\n", stack->checkSum);
540         
541         fprintf(output, "\tdata [%p]: {\n", stack->data);
542         if (checks == STACK_ST_OK) {
543         size_t i = 0;
544         for (i = 0; i < stack->size; i++) {
545             fprintf(output, "\t\t");
546             fprintf(output, "*[%lu] : ", i);
547             fprintf(output, "[%p] ", stack->data + i);
548             StackElementDump(stack->logFile, stack->data[i]);
549             fprintf(output, "\n");
550         }
551         fprintf(output, "\t\t _______\n");
552         if (stack->size  < stack->capacity) {
553             fprintf(output, "\t\t [%lu] : GARBAGE(", i);
554             fprintf(output, "[%p] ", stack->data + i);
555             StackElementDump(stack->logFile, stack->data[i]);
556             fprintf(output, ")\n");
557         }
558         if (stack->size + 1< stack->capacity && stack->size + 1 > stack->size) {
559             fprintf(output, "\t\t [%lu] : GARBAGE(", i + 1);
560             fprintf(output, "[%p] ", stack->data + i + 1);
561             StackElementDump(stack->logFile, stack->data[i + 1]);
562             fprintf(output, ")\n");
563         }
564         } else{
565             fprintf(output, "\t\tDATA CAN'T BE READED\n");
566         }
567         
568         fprintf(output, "\t}\n");
569         fprintf(output, "}\n");
570         
571         const size_t memory = StackRigidMemoryUse(stack);
572         fprintf(output, "Size allocated : %lu bytes\n", memory);
573         fprintf(output, "Raw Stack size : %lu bytes\n", sizeof(__overload(StackRigid)));
574         fprintf(output, "  Element size : %lu bytes\n", sizeof(StackElementType));
575         fprintf(output, "     Block end : %p\n", (char*)stack + memory);
576     }
577     fprintf(output, "=================================\n");
578     fflush(NULL);
579     
580 }
.fi
.PP
References __overload, memory, STACK_ST_INTEGRITYERR, STACK_ST_NULL, STACK_ST_OK, STACK_ST_UNINITIALIZED, StackElementDump, StackElementType, StackRigidMemoryUse(), and StackValidate()\&.
.SS "\fBStackRigidOperationCodes\fP StackPop (\fB__overload\fP(StackRigid) ** stack, \fBStackElementType\fP * value)"

.PP
Pop value from the end of the stack The operation can perform reallocations if there is too much space\&. 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be distructed 
.br
\fIvalue\fP value to be pushed 
.RE
.PP
\fBReturns\fP
.RS 4
the outcome of the operation 
.RE
.PP

.PP
.nf
325                                                                                             {
326     if (!istack_pointer_valid(stack, sizeof(stack)))
327         return STACK_OP_NULL;
328     
329     StackRigidState integrityChecks = StackValidate(*stack);
330     
331     if (integrityChecks != STACK_ST_OK) {
332         StackDumpWrapperWhy(*stack, "StackPop operation spotted integrity error");
333         return STACK_OP_INTEGRITYERR;
334     }
335     
336     if((*stack)->size == 0)
337         return STACK_OP_UNDERFLOW;
338     
339     *value = (*stack)->data[(*stack)->size - 1];
340     (*stack)->size -= 1;
341     
342     __StackReallocate(stack, -1);
343     __StackUpdateChecksum(*stack);
344 
345     return STACK_OP_OK;
346 }
.fi
.PP
References __StackReallocate(), __StackUpdateChecksum(), STACK_OP_INTEGRITYERR, STACK_OP_NULL, STACK_OP_OK, STACK_OP_UNDERFLOW, STACK_ST_OK, StackDumpWrapperWhy, and StackValidate()\&.
.PP
Referenced by main()\&.
.SS "\fBStackRigidOperationCodes\fP StackPush (\fB__overload\fP(StackRigid) ** stack, \fBStackElementType\fP value)"

.PP
Push the value to the stack The operation can perform reallocations if there is not enough space\&. 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be changed 
.br
\fIvalue\fP value to be pushed 
.RE
.PP
\fBReturns\fP
.RS 4
the outcome of the operation 
.RE
.PP

.PP
.nf
260                                                                                            {
261     if (!istack_pointer_valid(stack, sizeof(stack)))
262         return STACK_OP_PTRINVALID;
263     if (!istack_pointer_valid(*stack, sizeof(*stack)))
264         return STACK_OP_PTRINVALID;
265     
266     
267     StackRigidState integrityChecks = StackValidate(*stack);
268     
269     if (integrityChecks != STACK_ST_OK) {
270         StackDumpWrapperWhy(*stack, "StackPush operation spotted integrity error");
271         return STACK_OP_INTEGRITYERR;
272     }
273     
274     
275     StackRigidOperationCodes reallocResult = __StackReallocate(stack, 1);
276     
277     if (reallocResult != STACK_OP_OK) {
278         StackDumpWrapperWhy(*stack, "StackPop operation spotted integrity error during the reallocation");
279         return reallocResult;
280     }
281     
282     (*stack)->data[(*stack)->size] = value;
283     (*stack)->size += 1;
284     
285     __StackUpdateChecksum(*stack);
286     
287     if ((*stack)->size == 0) {
288         return STACK_OP_OVERFLOW;
289     }
290     return STACK_OP_OK;
291 }
.fi
.PP
References __StackReallocate(), __StackUpdateChecksum(), STACK_OP_INTEGRITYERR, STACK_OP_OK, STACK_OP_OVERFLOW, STACK_OP_PTRINVALID, STACK_ST_OK, StackDumpWrapperWhy, and StackValidate()\&.
.PP
Referenced by main()\&.
.SS "size_t StackRigidMemoryUse (\fB__overload\fP(StackRigid) * stack)"

.PP
Memory alocated for the Stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be checked 
.RE
.PP
\fBReturns\fP
.RS 4
alocated bytes 
.RE
.PP

.PP
.nf
485                                                            {
486     assert(stack);
487     return sizeof(__overload(StackRigid)) + (stack->capacity - 1) * sizeof(StackElementType);
488 }
.fi
.PP
References __overload, and StackElementType\&.
.PP
Referenced by __StackGetChecksum(), __StackReallocate(), main(), StackDestruct(), and StackDump()\&.
.SS "\fBStackRigidState\fP StackValidate (\fB__overload\fP(StackRigid) * stack)"

.PP
Perform all stack checks: checksums, general constrains\&. 
.PP
\fBParameters\fP
.RS 4
\fIstack\fP Stack to be validated 
.RE
.PP
\fBReturns\fP
.RS 4
calculated state 
.RE
.PP

.PP
.nf
369                                                               {
370     if (!istack_pointer_valid(stack, sizeof(stack)))
371         return STACK_ST_NULL;
372     
373     if (stack->size > stack->capacity || stack->checkSum == 0 || stack->checkSumVital == 0)
374         return STACK_ST_INTEGRITYERR;
375     
376     #ifndef IGNORE_VALIDITY
377         uint32_t currentChecksumVital = __StackGetChecksumVital(stack);
378         if (currentChecksumVital != stack->checkSumVital || currentChecksumVital == 0)
379             return STACK_ST_INTEGRITYERR;
380         
381         uint32_t currentChecksum = __StackGetChecksum(stack);
382         if (currentChecksum != stack->checkSum || currentChecksum == 0)
383             return STACK_ST_INTEGRITYERR;
384     #endif
385 
386     return STACK_ST_OK;
387 }
.fi
.PP
References __StackGetChecksum(), __StackGetChecksumVital(), STACK_ST_INTEGRITYERR, STACK_ST_NULL, and STACK_ST_OK\&.
.PP
Referenced by main(), StackBack(), StackDestruct(), StackDump(), StackPop(), and StackPush()\&.
.SH "Variable Documentation"
.PP 
.SS "size_t added = \fBmemory\fP + (\fBcapacity\fP \- 1) * sizeof(\fBStackElementType\fP)"

.SS "\fBpointer\fP capacity = capacity"

.SS "\fBpointer\fP checkSum = 0"

.SS "\fBpointer\fP checkSumVital = 0"

.SS "\fBpointer\fP logFile"
\fBInitial value:\fP
.PP
.nf
{
     if (capacity == 0)
         capacity = 1
.fi
.SS "memory = sizeof( \fB__overload\fP(StackRigid))"

.PP
Referenced by __StackGetChecksum(), __StackGetChecksumVital(), __StackReallocate(), and StackDump()\&.
.SS "return pointer"

.SS "\fBpointer\fP size = 0"

.SH "Author"
.PP 
Generated automatically by Doxygen for StackRigid from the source code\&.
