<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="StackRigid_8h" kind="file" language="C++">
    <compoundname>StackRigid.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">time.h</includes>
    <includedby refid="main_8cpp" local="yes">/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/main.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h</label>
        <link refid="StackRigid_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>time.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h</label>
        <link refid="StackRigid_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="StackRigid_8h_1a96e0bc8f204dbef33b6e6a664c5b5663" prot="public" static="no">
        <name>PASTER</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>x ## _ ## y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="16" column="12" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a90ce550ff78fd420b633c5d88dfd2883" prot="public" static="no">
        <name>EVALUATOR</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer><ref refid="StackRigid_8h_1a96e0bc8f204dbef33b6e6a664c5b5663" kindref="member">PASTER</ref>(x,y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="17" column="9" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" prot="public" static="no">
        <name>__overload</name>
        <param><defname>FUNC</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer><ref refid="StackRigid_8h_1a90ce550ff78fd420b633c5d88dfd2883" kindref="member">EVALUATOR</ref>(FUNC, TYPE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="18" column="9" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" prot="public" static="no">
        <name>StackElementDump</name>
        <param><defname>FILE</defname></param>
        <param><defname>VALUE</defname></param>
        <initializer>{fprintf(FILE, &quot;%d&quot;, VALUE);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="21" column="9" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="StackRigid_8h_1afa660da841608914d20d9819a7efe039" prot="public" static="no" strong="no">
        <type></type>
        <name>StackRigidOperationCodes</name>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" prot="public">
          <name>STACK_OP_OK</name>
          <briefdescription>
<para>Succesful operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" prot="public">
          <name>STACK_OP_UNDERFLOW</name>
          <briefdescription>
<para>Tried to get value from the empty stack. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" prot="public">
          <name>STACK_OP_OVERFLOW</name>
          <briefdescription>
<para>Stack overflow and new memory allocation failed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" prot="public">
          <name>STACK_OP_NOMEMORY</name>
          <briefdescription>
<para>No memory for stack alocations. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" prot="public">
          <name>STACK_OP_INTEGRITYERR</name>
          <briefdescription>
<para>Stack memory was altered by some outer access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" prot="public">
          <name>STACK_OP_NULL</name>
          <briefdescription>
<para>Found NULL pointer during the operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Codes returned after operations on Stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="46" column="1" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="46" bodyend="71"/>
      </memberdef>
      <memberdef kind="enum" id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" prot="public" static="no" strong="no">
        <type></type>
        <name>StackRigidState</name>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" prot="public">
          <name>STACK_ST_OK</name>
          <briefdescription>
<para>Stack is running as expected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" prot="public">
          <name>STACK_ST_INTEGRITYERR</name>
          <briefdescription>
<para>Stack was altered by some outer access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" prot="public">
          <name>STACK_ST_UNINITIALIZED</name>
          <briefdescription>
<para>Stack is uninitialized. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" prot="public">
          <name>STACK_ST_NULL</name>
          <briefdescription>
<para>Found NULL pointer during the operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Codes characterizing Stack state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="77" column="1" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="77" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="StackRigid_8h_1a2b23b57ad918293ba96140fc43194967" prot="public" static="no">
        <type>enum <ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>typedef enum StackRigidOperationCodes StackRigidOperationCodes</definition>
        <argsstring></argsstring>
        <name>StackRigidOperationCodes</name>
        <briefdescription>
<para>Codes returned after operations on Stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="71" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="StackRigid_8h_1acc74b48b41d3ec38cb05184b602c7508" prot="public" static="no">
        <type>enum <ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref></type>
        <definition>typedef enum StackRigidState StackRigidState</definition>
        <argsstring></argsstring>
        <name>StackRigidState</name>
        <briefdescription>
<para>Codes characterizing Stack state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="94" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t adlerChecksum</definition>
        <argsstring>(const void *firstBlock, size_t len)</argsstring>
        <name>adlerChecksum</name>
        <param>
          <type>const void *</type>
          <declname>firstBlock</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Calculates Adler-32 checksum from the firstBlock to the firstBlock + len. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">firstBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>first block to include to the checksum </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of byte sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>checksum </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="32" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="32" bodyend="40" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="170" declcolumn="17"/>
        <referencedby refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" compoundref="StackRigid_8h" startline="369" endline="386">__StackGetChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" compoundref="StackRigid_8h" startline="356" endline="366">__StackGetChecksumVital</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>__overload</definition>
        <argsstring>(StackRigid, StackElementType) __overload(StackRigid</argsstring>
        <name>__overload</name>
        <param>
          <type>StackRigid</type>
        </param>
        <param>
          <type><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref></type>
        </param>
        <briefdescription>
<para>The main structure. </para>
        </briefdescription>
        <detaileddescription>
<para>Create new stack with pre-defined capacity.</para>
<para>There&apos;s no definition in the header file in order to block direct parameters access</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>initial stack capacity. Set to 0 if yo want the stack to adopt automaticaly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">logFile</parametername>
</parameternamelist>
<parameterdescription>
<para>file for logging </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new stack pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="32" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __StackUpdateChecksum</definition>
        <argsstring>(__overload(StackRigid, StackElementType) *stack)</argsstring>
        <name>__StackUpdateChecksum</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Updates Stack checksums. Does not take into account bytes inside the stack but outside of its last element. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! <verbatim>* Stack memory :  [ __stack area__ | value 1, value 2, ..., value n || ___garbage area___]
* ____________________________________________________________________^ alterations in this area are not checked
* </verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack that checksums are needed to be updated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="347" column="13" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="347" bodyend="353" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="125" declcolumn="13"/>
        <references refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" compoundref="StackRigid_8h" startline="369" endline="386">__StackGetChecksum</references>
        <references refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" compoundref="StackRigid_8h" startline="356" endline="366">__StackGetChecksumVital</references>
        <referencedby refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" compoundref="StackRigid_8h" startline="267" endline="281">StackElementType</referencedby>
        <referencedby refid="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" compoundref="StackRigid_8h" startline="284" endline="305">StackPop</referencedby>
        <referencedby refid="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" compoundref="StackRigid_8h" startline="239" endline="264">StackPush</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t __StackGetChecksum</definition>
        <argsstring>(__overload(StackRigid, StackElementType) *stack)</argsstring>
        <name>__StackGetChecksum</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Claculates big Stack checksum. Uses Adler-32 method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! <verbatim>* Stack memory : [ checkSum checkSumVital capacity size logFile | value 1, value 2, ..., value n || ___garbage area___]
* ________________from here ^__________________________________________________________^to here
* </verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack that checksums are needed to be updated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="369" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="369" bodyend="386" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="137" declcolumn="17"/>
        <references refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" compoundref="StackRigid_8h" startline="32" endline="40">adlerChecksum</references>
        <references refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" compoundref="StackRigid_8h" startline="267" endline="281">StackElementType</references>
        <references refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" compoundref="StackRigid_8h" startline="444" endline="447">StackRigidMemoryUse</references>
        <referencedby refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" compoundref="StackRigid_8h" startline="347" endline="353">__StackUpdateChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" compoundref="StackRigid_8h" startline="326" endline="344">StackValidate</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t __StackGetChecksumVital</definition>
        <argsstring>(__overload(StackRigid, StackElementType) *stack)</argsstring>
        <name>__StackGetChecksumVital</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Uses Adler-32 method. Calculates Stack checksum only for the vital parameters. This is necessary because <ref refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" kindref="member">__StackGetChecksum()</ref> relies on capacity and size. If they were changed, behaviour is undefined. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use!</para>
</simplesect>
<verbatim>* Stack memory : [ checkSum checkSumVital capacity size logFile | value 1, value 2, ..., value n || ___garbage area___]
* ______________________________from here ^__________________^to here
* </verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack that checksums are needed to be updated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="356" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="356" bodyend="366" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="151" declcolumn="17"/>
        <references refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" compoundref="StackRigid_8h" startline="32" endline="40">adlerChecksum</references>
        <referencedby refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" compoundref="StackRigid_8h" startline="347" endline="353">__StackUpdateChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" compoundref="StackRigid_8h" startline="326" endline="344">StackValidate</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>static StackRigidOperationCodes __StackRealocate</definition>
        <argsstring>(__overload(StackRigid, StackElementType) **stack, short int direction)</argsstring>
        <name>__StackRealocate</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) **</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Realocates Stack if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be realocated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">direction</parametername>
</parameternamelist>
<parameterdescription>
<para>which direction realocations are available. &gt; 0 -&gt; expand space if needed, &lt; 0 -&gt; shrink space if needed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="389" column="33" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="389" bodyend="442" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="160" declcolumn="33"/>
        <references refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" compoundref="StackRigid_8h" startline="18">__overload</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" compoundref="StackRigid_8h" startline="62">STACK_OP_NOMEMORY</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="50">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" compoundref="StackRigid_8h" startline="58">STACK_OP_OVERFLOW</references>
        <references refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" compoundref="StackRigid_8h" startline="267" endline="281">StackElementType</references>
        <references refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" compoundref="StackRigid_8h" startline="444" endline="447">StackRigidMemoryUse</references>
        <referencedby refid="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" compoundref="StackRigid_8h" startline="284" endline="305">StackPop</referencedby>
        <referencedby refid="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" compoundref="StackRigid_8h" startline="239" endline="264">StackPush</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>StackElementType</definition>
        <argsstring>(const size_t capacity, FILE *logFile)</argsstring>
        <name>StackElementType</name>
        <param>
          <type>const size_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>logFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="267" column="14" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="267" bodyend="281" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="179" declcolumn="14"/>
        <references refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" compoundref="StackRigid_8h" startline="18">__overload</references>
        <references refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" compoundref="StackRigid_8h" startline="347" endline="353">__StackUpdateChecksum</references>
        <referencedby refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" compoundref="StackRigid_8h" startline="369" endline="386">__StackGetChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" compoundref="StackRigid_8h" startline="389" endline="442">__StackRealocate</referencedby>
        <referencedby refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" compoundref="StackRigid_8h" startline="450" endline="522">StackDump</referencedby>
        <referencedby refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" compoundref="StackRigid_8h" startline="444" endline="447">StackRigidMemoryUse</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref></type>
        <definition>StackRigidState StackValidate</definition>
        <argsstring>(__overload(StackRigid, StackElementType) *stack)</argsstring>
        <name>StackValidate</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Perform all stack checks: checksums, general constrains. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be validated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="326" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="326" bodyend="344" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="186" declcolumn="17"/>
        <references refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" compoundref="StackRigid_8h" startline="369" endline="386">__StackGetChecksum</references>
        <references refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" compoundref="StackRigid_8h" startline="356" endline="366">__StackGetChecksumVital</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" compoundref="StackRigid_8h" startline="85">STACK_ST_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" compoundref="StackRigid_8h" startline="93">STACK_ST_NULL</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="81">STACK_ST_OK</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="71">main</referencedby>
        <referencedby refid="StackRigid_8h_1a5a14ed95132af097042c940751e1087a" compoundref="StackRigid_8h" startline="308" endline="323">StackBack</referencedby>
        <referencedby refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" compoundref="StackRigid_8h" startline="450" endline="522">StackDump</referencedby>
        <referencedby refid="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" compoundref="StackRigid_8h" startline="284" endline="305">StackPop</referencedby>
        <referencedby refid="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" compoundref="StackRigid_8h" startline="239" endline="264">StackPush</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackPush</definition>
        <argsstring>(__overload(StackRigid, StackElementType) **stack, StackElementType value)</argsstring>
        <name>StackPush</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) **</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Push the value to the stack The operation can perform realocations if there is not enough space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be pushed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="239" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="239" bodyend="264" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="196" declcolumn="26"/>
        <references refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" compoundref="StackRigid_8h" startline="389" endline="442">__StackRealocate</references>
        <references refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" compoundref="StackRigid_8h" startline="347" endline="353">__StackUpdateChecksum</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" compoundref="StackRigid_8h" startline="66">STACK_OP_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" compoundref="StackRigid_8h" startline="70">STACK_OP_NULL</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="50">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" compoundref="StackRigid_8h" startline="58">STACK_OP_OVERFLOW</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="81">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" compoundref="StackRigid_8h" startline="450" endline="522">StackDump</references>
        <references refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" compoundref="StackRigid_8h" startline="326" endline="344">StackValidate</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="71">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackPop</definition>
        <argsstring>(__overload(StackRigid, StackElementType) **stack, StackElementType *value)</argsstring>
        <name>StackPop</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) **</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Pop value from the end of the stack The operation can perform realocations if there is too much space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be distructed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be pushed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="284" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="284" bodyend="305" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="205" declcolumn="26"/>
        <references refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" compoundref="StackRigid_8h" startline="389" endline="442">__StackRealocate</references>
        <references refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" compoundref="StackRigid_8h" startline="347" endline="353">__StackUpdateChecksum</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" compoundref="StackRigid_8h" startline="66">STACK_OP_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" compoundref="StackRigid_8h" startline="70">STACK_OP_NULL</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="50">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" compoundref="StackRigid_8h" startline="54">STACK_OP_UNDERFLOW</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="81">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" compoundref="StackRigid_8h" startline="450" endline="522">StackDump</references>
        <references refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" compoundref="StackRigid_8h" startline="326" endline="344">StackValidate</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="71">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a53fd24cced8a15cd9b5eba14c46be8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackDestruct</definition>
        <argsstring>(__overload(StackRigid, StackElementType) **stack)</argsstring>
        <name>StackDestruct</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) **</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Free stack memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be distructed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="525" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="525" bodyend="534" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="213" declcolumn="26"/>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" compoundref="StackRigid_8h" startline="70">STACK_OP_NULL</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="50">STACK_OP_OK</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="71">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a5a14ed95132af097042c940751e1087a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackBack</definition>
        <argsstring>(__overload(StackRigid, StackElementType) *stack, StackElementType *value)</argsstring>
        <name>StackBack</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Free stack memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="308" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="308" bodyend="323" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="221" declcolumn="26"/>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" compoundref="StackRigid_8h" startline="66">STACK_OP_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" compoundref="StackRigid_8h" startline="70">STACK_OP_NULL</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="50">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" compoundref="StackRigid_8h" startline="54">STACK_OP_UNDERFLOW</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="81">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" compoundref="StackRigid_8h" startline="450" endline="522">StackDump</references>
        <references refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" compoundref="StackRigid_8h" startline="326" endline="344">StackValidate</references>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackDump</definition>
        <argsstring>(__overload(StackRigid, StackElementType) *stack)</argsstring>
        <name>StackDump</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Dumps debug information about the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be dumped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="450" column="6" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="450" bodyend="522" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="228" declcolumn="6"/>
        <references refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" compoundref="StackRigid_8h" startline="18">__overload</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" compoundref="StackRigid_8h" startline="85">STACK_ST_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" compoundref="StackRigid_8h" startline="93">STACK_ST_NULL</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="81">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" compoundref="StackRigid_8h" startline="89">STACK_ST_UNINITIALIZED</references>
        <references refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" compoundref="StackRigid_8h" startline="21">StackElementDump</references>
        <references refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" compoundref="StackRigid_8h" startline="267" endline="281">StackElementType</references>
        <references refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" compoundref="StackRigid_8h" startline="444" endline="447">StackRigidMemoryUse</references>
        <references refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" compoundref="StackRigid_8h" startline="326" endline="344">StackValidate</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="71">main</referencedby>
        <referencedby refid="StackRigid_8h_1a5a14ed95132af097042c940751e1087a" compoundref="StackRigid_8h" startline="308" endline="323">StackBack</referencedby>
        <referencedby refid="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" compoundref="StackRigid_8h" startline="284" endline="305">StackPop</referencedby>
        <referencedby refid="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" compoundref="StackRigid_8h" startline="239" endline="264">StackPush</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t StackRigidMemoryUse</definition>
        <argsstring>(__overload(StackRigid, StackElementType) *stack)</argsstring>
        <name>StackRigidMemoryUse</name>
        <param>
          <type><ref refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" kindref="member">__overload</ref>(StackRigid, <ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Memory alocated for the Stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>alocated bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="444" column="8" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="444" bodyend="447" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="236" declcolumn="8"/>
        <references refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" compoundref="StackRigid_8h" startline="18">__overload</references>
        <references refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" compoundref="StackRigid_8h" startline="267" endline="281">StackElementType</references>
        <referencedby refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" compoundref="StackRigid_8h" startline="369" endline="386">__StackGetChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" compoundref="StackRigid_8h" startline="389" endline="442">__StackRealocate</referencedby>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="71">main</referencedby>
        <referencedby refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" compoundref="StackRigid_8h" startline="450" endline="522">StackDump</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#undef<sp/>__overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PASTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>EVALUATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="StackRigid_8h_1a96e0bc8f204dbef33b6e6a664c5b5663" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PASTER(x,y)<sp/>x<sp/>##<sp/>_<sp/>##<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="StackRigid_8h_1a90ce550ff78fd420b633c5d88dfd2883" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVALUATOR(x,y)<sp/><sp/>PASTER(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__overload(FUNC,<sp/>TYPE)<sp/>EVALUATOR(FUNC,<sp/>TYPE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>StackElementDump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>StackElementDump(FILE,<sp/>VALUE)<sp/>{fprintf(FILE,<sp/>&quot;%d&quot;,<sp/>VALUE);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>StackRigid_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>StackRigid_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" kindref="member">adlerChecksum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>firstBlock,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>a<sp/>=<sp/>1,<sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>MOD_ADLER<sp/>=<sp/>65521;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>len;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)firstBlock)[index])<sp/>%<sp/>MOD_ADLER;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(b<sp/>+<sp/>a)<sp/>%<sp/>MOD_ADLER;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>a;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref>{</highlight></codeline>
<codeline lineno="50" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>,</highlight></codeline>
<codeline lineno="54" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" kindref="member">STACK_OP_UNDERFLOW</ref>,</highlight></codeline>
<codeline lineno="58" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>,</highlight></codeline>
<codeline lineno="62" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>,</highlight></codeline>
<codeline lineno="66" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref></highlight></codeline>
<codeline lineno="71" refid="StackRigid_8h_1a2b23b57ad918293ba96140fc43194967" refkind="member"><highlight class="normal">}<sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref>{</highlight></codeline>
<codeline lineno="81" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>,</highlight></codeline>
<codeline lineno="85" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>,</highlight></codeline>
<codeline lineno="89" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" kindref="member">STACK_ST_UNINITIALIZED</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" kindref="member">STACK_ST_NULL</ref></highlight></codeline>
<codeline lineno="94" refid="StackRigid_8h_1acc74b48b41d3ec38cb05184b602c7508" refkind="member"><highlight class="normal">}<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>StackRigid_h<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="StackRigid_8h_1a94083fea0de2aea65e4fb9440048f757" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)<sp/><sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>checkSum;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>checkSumVital;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>logFile;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref><sp/>data[1];</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" kindref="member">__StackUpdateChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" kindref="member">__StackGetChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" kindref="member">__StackGetChecksumVital</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" kindref="member">__StackRealocate</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" kindref="member">adlerChecksum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>firstBlock,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(NewStackRigid,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/>FILE*<sp/>logFile);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/><ref refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" kindref="member">StackValidate</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" kindref="member">StackPush</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref><sp/>value);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" kindref="member">StackPop</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>*<sp/>value);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a53fd24cced8a15cd9b5eba14c46be8bf" kindref="member">StackDestruct</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a5a14ed95132af097042c940751e1087a" kindref="member">StackBack</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>*<sp/>value);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" kindref="member">StackDump</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1aa9a346debdba44a4d6d8a6d165aecba7" kindref="member">StackPush</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref><sp/>value){</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>integrityChecks<sp/>=<sp/><ref refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" kindref="member">StackValidate</ref>(*stack);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integrityChecks<sp/>!=<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" kindref="member">StackDump</ref>(*stack);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/>realocResult<sp/>=<sp/><ref refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" kindref="member">__StackRealocate</ref>(stack,<sp/>1);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(realocResult<sp/>!=<sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" kindref="member">StackDump</ref>(*stack);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realocResult;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>(*stack)-&gt;data[(*stack)-&gt;size]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>(*stack)-&gt;size<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" kindref="member">__StackUpdateChecksum</ref>(*stack);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*stack)-&gt;size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" refkind="member"><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(NewStackRigid,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/>FILE*<sp/>logFile){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memory<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>))<sp/>+<sp/>(capacity<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>pointer<sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*)calloc(memory,<sp/>1);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer-&gt;capacity<sp/>=<sp/>capacity;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer-&gt;size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer-&gt;logFile<sp/>=<sp/>logFile;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer-&gt;checkSum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer-&gt;checkSumVital<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" kindref="member">__StackUpdateChecksum</ref>(pointer);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pointer;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a984cb1d53f4129fda870b57ade0d6c51" kindref="member">StackPop</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>integrityChecks<sp/>=<sp/><ref refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" kindref="member">StackValidate</ref>(*stack);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integrityChecks<sp/>!=<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" kindref="member">StackDump</ref>(*stack);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*stack)-&gt;size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" kindref="member">STACK_OP_UNDERFLOW</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>(*stack)-&gt;data[(*stack)-&gt;size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>(*stack)-&gt;size<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" kindref="member">__StackRealocate</ref>(stack,<sp/>-1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" kindref="member">__StackUpdateChecksum</ref>(*stack);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="StackRigid_8h_1a5a14ed95132af097042c940751e1087a" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a5a14ed95132af097042c940751e1087a" kindref="member">StackBack</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack,<sp/><ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>*<sp/>value){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>integrityChecks<sp/>=<sp/><ref refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" kindref="member">StackValidate</ref>(stack);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integrityChecks<sp/>!=<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" kindref="member">StackDump</ref>(stack);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack-&gt;size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" kindref="member">STACK_OP_UNDERFLOW</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>stack-&gt;data[stack-&gt;size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/><ref refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" kindref="member">StackValidate</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" kindref="member">STACK_ST_NULL</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>&gt;<sp/>stack-&gt;capacity<sp/>||<sp/>stack-&gt;checkSum<sp/>==<sp/>0<sp/>||<sp/>stack-&gt;checkSumVital<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>currentChecksumVital<sp/>=<sp/><ref refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" kindref="member">__StackGetChecksumVital</ref>(stack);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentChecksumVital<sp/>!=<sp/>stack-&gt;checkSumVital<sp/>||<sp/>currentChecksumVital<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>currentChecksum<sp/>=<sp/><ref refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" kindref="member">__StackGetChecksum</ref>(stack);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentChecksum<sp/>!=<sp/>stack-&gt;checkSum<sp/>||<sp/>currentChecksum<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a1c658f9883a1c527daca9053c4270cc3" kindref="member">__StackUpdateChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;checkSumVital<sp/>=<sp/><ref refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" kindref="member">__StackGetChecksumVital</ref>(stack);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;checkSum<sp/>=<sp/><ref refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" kindref="member">__StackGetChecksum</ref>(stack);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1adc53f4c04137400ffb8b2b16dd7f0766" kindref="member">__StackGetChecksumVital</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>firstBlock<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)stack<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSumVital);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memory<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;size)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;capacity)+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;logFile);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>&gt;<sp/>stack-&gt;capacity)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" kindref="member">adlerChecksum</ref>(firstBlock,<sp/>memory);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1aec5b9f98f7a764952e21338bdb33d657" kindref="member">__StackGetChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>firstBlock<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)stack<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>used<sp/>by<sp/>Stack<sp/>excluding<sp/>checkSum<sp/>and<sp/>free<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memory<sp/>=<sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(stack)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum)<sp/>-<sp/>(stack-&gt;capacity<sp/>-<sp/>stack-&gt;size)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memory<sp/>=<sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(stack)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>&gt;<sp/>stack-&gt;capacity)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" kindref="member">adlerChecksum</ref>(firstBlock,<sp/>memory);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1abebf4fe4d74c00e6c77133e0cc6aff7c" kindref="member">__StackRealocate</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*stack)-&gt;capacity<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)-&gt;capacity<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memory<sp/>=<sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(*stack);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>newStack<sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*)<sp/>realloc((*stack),<sp/>memory);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newStack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)<sp/>=<sp/>newStack;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((*stack)-&gt;capacity<sp/>&lt;=<sp/>(*stack)-&gt;size)<sp/>&amp;&amp;<sp/>direction<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Up<sp/>realocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newCapacity<sp/>=<sp/>(*stack)-&gt;size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newCapacity<sp/>&lt;=<sp/>(*stack)-&gt;size)<sp/>{<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>we<sp/>exceeded<sp/>size_t<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCapacity<sp/>=<sp/>(*stack)-&gt;size<sp/>+<sp/>16;<sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>add<sp/>16<sp/>free<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newCapacity<sp/>&lt;<sp/>(*stack)-&gt;size)<sp/></highlight><highlight class="comment">//<sp/><sp/>Even<sp/>if<sp/>in<sp/>this<sp/>case<sp/>we<sp/>still<sp/>exceed<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNow<sp/>=<sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(*stack);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNew<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>))<sp/>+<sp/>(newCapacity<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memoryNew<sp/>&gt;=<sp/>memoryNow)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>newStack<sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*)<sp/>realloc((*stack),<sp/>memoryNew);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newStack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)<sp/>=<sp/>newStack;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;<sp/></highlight><highlight class="comment">//<sp/>Exceded<sp/>size_t<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)-&gt;capacity<sp/>=<sp/>newCapacity;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((*stack)-&gt;capacity<sp/>/<sp/>2.2<sp/>&gt;<sp/>(*stack)-&gt;size)<sp/>&amp;&amp;<sp/>direction<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Down<sp/>realocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newCapacity<sp/>=<sp/>(*stack)-&gt;capacity<sp/>/<sp/>2.2;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNow<sp/>=<sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(*stack);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNew<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>))<sp/>+<sp/>(newCapacity<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memoryNew<sp/>&lt;=<sp/>memoryNow)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>newStack<sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*)<sp/>realloc((*stack),<sp/>memoryNew);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newStack<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)<sp/>=<sp/>newStack;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)-&gt;capacity<sp/>=<sp/>newCapacity;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;<sp/></highlight><highlight class="comment">//<sp/>Exceded<sp/>size_t<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>))<sp/>+<sp/>(stack-&gt;capacity<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3cda48db0043a1f64ec157f2c0235f15" kindref="member">StackDump</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>rawtime<sp/>=<sp/>time(NULL);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*ptm<sp/>=<sp/>localtime(&amp;rawtime);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>output<sp/>=<sp/>stack-&gt;logFile;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nWarning!<sp/>Specified<sp/>dump<sp/>output<sp/>is<sp/>inavailbale!<sp/>Selecting<sp/>stdout.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;=================================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>dump<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>asctime(ptm));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\nStack<sp/>dump<sp/>is<sp/>impossible:<sp/>NULL<sp/>pointer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>checks<sp/>=<sp/><ref refid="StackRigid_8h_1aff7c80cd72a6cbde2bde1b740148b688" kindref="member">StackValidate</ref>(stack);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(checks)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>:</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INTEGRITY<sp/>ERROR<sp/>SPOTTED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" kindref="member">STACK_ST_UNINITIALIZED</ref>:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;UNINITIALIZED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" kindref="member">STACK_ST_NULL</ref>:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>POINTER&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>status);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[%p]:<sp/>{\n&quot;</highlight><highlight class="normal">,<sp/>stack);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checks<sp/>==<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;ERROR!<sp/>Stack<sp/>structure<sp/>was<sp/>corrupted.<sp/>The<sp/>data<sp/>below<sp/>was<sp/>changed<sp/>from<sp/>the<sp/>outside.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t<sp/><sp/><sp/><sp/>size<sp/>:<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;size);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\tcapacity<sp/>:<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;capacity);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\tcheckSum<sp/>:<sp/>%x\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;checkSum);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\tdata<sp/>[%p]:<sp/>{\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;data);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stack-&gt;size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;*[%lu]<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" kindref="member">StackElementDump</ref>(stack-&gt;logFile,<sp/>stack-&gt;data[i]);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t<sp/>_______\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>&lt;<sp/>stack-&gt;capacity)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t<sp/>[%lu]<sp/>:<sp/>GARBAGE(&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" kindref="member">StackElementDump</ref>(stack-&gt;logFile,<sp/>stack-&gt;data[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>+<sp/>1<sp/>&lt;<sp/>stack-&gt;capacity<sp/>&amp;&amp;<sp/>stack-&gt;size<sp/>+<sp/>1<sp/>&gt;<sp/>stack-&gt;size)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t<sp/>[%lu]<sp/>:<sp/>GARBAGE(&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" kindref="member">StackElementDump</ref>(stack-&gt;logFile,<sp/>stack-&gt;data[i<sp/>+<sp/>2]);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memory<sp/>=<sp/><ref refid="StackRigid_8h_1a127c18498567a23b96117f7d368c19cf" kindref="member">StackRigidMemoryUse</ref>(stack);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>allocated<sp/>:<sp/>%lu<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>memory);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Raw<sp/>Stack<sp/>size<sp/>:<sp/>%lu<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Element<sp/>size<sp/>:<sp/>%lu<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>Block<sp/>end<sp/>:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)stack<sp/>+<sp/>memory);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;=================================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="StackRigid_8h_1a53fd24cced8a15cd9b5eba14c46be8bf" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a53fd24cced8a15cd9b5eba14c46be8bf" kindref="member">StackDestruct</ref>(<sp/><ref refid="StackRigid_8h_1a2cbee6c5dd610768a24ea755d3db8ed9" kindref="member">__overload</ref>(StackRigid,<ref refid="StackRigid_8h_1af8b6893750f868193aa85e4bdc86b200" kindref="member">StackElementType</ref>)**<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*stack<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*stack);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h"/>
  </compounddef>
</doxygen>
