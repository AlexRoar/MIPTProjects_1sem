<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="StackRigid_8h" kind="file" language="C++">
    <compoundname>StackRigid.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">time.h</includes>
    <includes local="yes">PointerChecks.h</includes>
    <includedby refid="main_8cpp" local="yes">/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/main.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h</label>
        <link refid="StackRigid_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>time.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>PointerChecks.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h</label>
        <link refid="StackRigid_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" prot="public" static="no">
        <name>StackElementDump</name>
        <param><defname>FILE</defname></param>
        <param><defname>VALUE</defname></param>
        <initializer>{fprintf(FILE, &quot;%d&quot;, VALUE);}</initializer>
        <briefdescription>
<para>Default element dump instruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="19" column="13" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" prot="public" static="no">
        <name>StackElementType</name>
        <initializer>int</initializer>
        <briefdescription>
<para>By default, it will be stack of ints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="27" column="13" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a96e0bc8f204dbef33b6e6a664c5b5663" prot="public" static="no">
        <name>PASTER</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>x ## _ ## y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="39" column="12" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a90ce550ff78fd420b633c5d88dfd2883" prot="public" static="no">
        <name>EVALUATOR</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer><ref refid="StackRigid_8h_1a96e0bc8f204dbef33b6e6a664c5b5663" kindref="member">PASTER</ref>(x,y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="40" column="9" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" prot="public" static="no">
        <name>__overload</name>
        <param><defname>FUNC</defname></param>
        <initializer><ref refid="StackRigid_8h_1a90ce550ff78fd420b633c5d88dfd2883" kindref="member">EVALUATOR</ref>(FUNC, <ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="41" column="9" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a1ca59cdde73826c9f67b7644f2b89392" prot="public" static="no">
        <name>StackRigid_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="44" column="9" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1a8b856f31dd10f1a46ec113d807a576e4" prot="public" static="no">
        <name>StackDumpWrapper</name>
        <param><defname>stack</defname></param>
        <initializer>{ <ref refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" kindref="member">StackDump</ref>(stack, __LINE__, __FILE__, &quot;&quot;); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="55" column="10" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" prot="public" static="no">
        <name>StackDumpWrapperWhy</name>
        <param><defname>stack</defname></param>
        <param><defname>why</defname></param>
        <initializer>{ <ref refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" kindref="member">StackDump</ref>(stack, __LINE__, __FILE__, why); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="60" column="10" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="StackRigid_8h_1afa660da841608914d20d9819a7efe039" prot="public" static="no" strong="no">
        <type></type>
        <name>StackRigidOperationCodes</name>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" prot="public">
          <name>STACK_OP_OK</name>
          <briefdescription>
<para>Succesful operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" prot="public">
          <name>STACK_OP_UNDERFLOW</name>
          <briefdescription>
<para>Tried to get value from the empty stack. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" prot="public">
          <name>STACK_OP_OVERFLOW</name>
          <briefdescription>
<para>Stack overflow and new memory allocation failed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" prot="public">
          <name>STACK_OP_NOMEMORY</name>
          <briefdescription>
<para>No memory for stack alocations. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" prot="public">
          <name>STACK_OP_INTEGRITYERR</name>
          <briefdescription>
<para>Stack memory was altered by some outer access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" prot="public">
          <name>STACK_OP_NULL</name>
          <briefdescription>
<para>Found NULL pointer during the operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd3730a577045e9e7d8e5ccc91b4ad60" prot="public">
          <name>STACK_OP_PTRINVALID</name>
          <briefdescription>
<para>Found invalid pointer during the operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Codes returned after operations on Stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="68" column="1" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="68" bodyend="97"/>
      </memberdef>
      <memberdef kind="enum" id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" prot="public" static="no" strong="no">
        <type></type>
        <name>StackRigidState</name>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" prot="public">
          <name>STACK_ST_OK</name>
          <briefdescription>
<para>Stack is running as expected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" prot="public">
          <name>STACK_ST_INTEGRITYERR</name>
          <briefdescription>
<para>Stack was altered by some outer access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" prot="public">
          <name>STACK_ST_UNINITIALIZED</name>
          <briefdescription>
<para>Stack is uninitialized. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" prot="public">
          <name>STACK_ST_NULL</name>
          <briefdescription>
<para>Found NULL pointer during the operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Codes characterizing Stack state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="103" column="1" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="103" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="StackRigid_8h_1a2b23b57ad918293ba96140fc43194967" prot="public" static="no">
        <type>enum <ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>typedef enum StackRigidOperationCodes StackRigidOperationCodes</definition>
        <argsstring></argsstring>
        <name>StackRigidOperationCodes</name>
        <briefdescription>
<para>Codes returned after operations on Stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="97" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="StackRigid_8h_1acc74b48b41d3ec38cb05184b602c7508" prot="public" static="no">
        <type>enum <ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref></type>
        <definition>typedef enum StackRigidState StackRigidState</definition>
        <argsstring></argsstring>
        <name>StackRigidState</name>
        <briefdescription>
<para>Codes characterizing Stack state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="120" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" prot="public" static="no" mutable="no">
        <type>FILE *</type>
        <definition>pointer logFile</definition>
        <argsstring></argsstring>
        <name>logFile</name>
        <initializer>{
     <ref refid="StackRigid_8h_1a91b7dbe1417e55c20b6fb91b478a103c" kindref="member">if</ref> (<ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref> == 0)
         <ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref> = 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="162" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>memory</definition>
        <argsstring></argsstring>
        <name>memory</name>
        <initializer>= sizeof( <ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="311" column="13" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="311" bodyend="-1"/>
        <referencedby refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" compoundref="StackRigid_8h" startline="426" endline="443">__StackGetChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" compoundref="StackRigid_8h" startline="413" endline="423">__StackGetChecksumVital</referencedby>
        <referencedby refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" compoundref="StackRigid_8h" startline="446" endline="497">__StackReallocate</referencedby>
        <referencedby refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" compoundref="StackRigid_8h" startline="505" endline="594">StackDump</referencedby>
      </memberdef>
      <memberdef kind="variable" id="StackRigid_8h_1abc72ff9c357136a52ae7f00fbaf9a645" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t added</definition>
        <argsstring></argsstring>
        <name>added</name>
        <initializer>= <ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref> + (<ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref> - 1) * sizeof(<ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="312" column="13" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" prot="public" static="no" mutable="no">
        <type><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref></type>
        <definition>pointer capacity</definition>
        <argsstring></argsstring>
        <name>capacity</name>
        <initializer>= capacity</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="327" column="12" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="StackRigid_8h_1aa778f833989c5b73d0fbe86e9b6ef977" prot="public" static="no" mutable="no">
        <type><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref></type>
        <definition>pointer size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="328" column="12" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="StackRigid_8h_1a8a32205e08c87c56f05f432202831329" prot="public" static="no" mutable="no">
        <type><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref></type>
        <definition>pointer checkSum</definition>
        <argsstring></argsstring>
        <name>checkSum</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="330" column="12" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="StackRigid_8h_1abada3e312a622648ad335f352a42fb77" prot="public" static="no" mutable="no">
        <type><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref></type>
        <definition>pointer checkSumVital</definition>
        <argsstring></argsstring>
        <name>checkSumVital</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="331" column="12" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" prot="public" static="no" mutable="no">
        <type>return</type>
        <definition>return pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="335" column="12" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t adlerChecksum</definition>
        <argsstring>(const void *firstBlock, size_t len)</argsstring>
        <name>adlerChecksum</name>
        <param>
          <type>const void *</type>
          <declname>firstBlock</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Calculates Adler-32 checksum from the firstBlock to the firstBlock + len. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">firstBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>first block to include to the checksum </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of byte sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>checksum </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="130" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="130" bodyend="138"/>
        <referencedby refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" compoundref="StackRigid_8h" startline="426" endline="443">__StackGetChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" compoundref="StackRigid_8h" startline="413" endline="423">__StackGetChecksumVital</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>__overload</definition>
        <argsstring>(StackRigid)</argsstring>
        <name>__overload</name>
        <param>
          <type>StackRigid</type>
        </param>
        <initializer>= ( __overload(StackRigid)*)calloc(<ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>, 1)</initializer>
        <briefdescription>
<para>The main StackRigid struct. </para>
        </briefdescription>
        <detaileddescription>
<para>Create new stack with pre-defined capacity.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>initial stack capacity. Set to 0 if you want the stack to adopt automaticaly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">logFile</parametername>
</parameternamelist>
<parameterdescription>
<para>file for logging </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new stack pointer or NULL if impossible </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="130" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="146" bodyend="153" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="321" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref></type>
        <definition>StackRigidState StackValidate</definition>
        <argsstring>(__overload(StackRigid) *stack)</argsstring>
        <name>StackValidate</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Perform all stack checks: checksums, general constrains. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be validated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="383" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="383" bodyend="401" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="170" declcolumn="17"/>
        <references refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" compoundref="StackRigid_8h" startline="426" endline="443">__StackGetChecksum</references>
        <references refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" compoundref="StackRigid_8h" startline="413" endline="423">__StackGetChecksumVital</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" compoundref="StackRigid_8h" startline="111">STACK_ST_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" compoundref="StackRigid_8h" startline="119">STACK_ST_NULL</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="107">STACK_ST_OK</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="75">main</referencedby>
        <referencedby refid="StackRigid_8h_1a81920cc1380e65ab9173893cb1772d86" compoundref="StackRigid_8h" startline="363" endline="380">StackBack</referencedby>
        <referencedby refid="StackRigid_8h_1a3addcf7a8000baf1be4d91a779f293e8" compoundref="StackRigid_8h" startline="597" endline="612">StackDestruct</referencedby>
        <referencedby refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" compoundref="StackRigid_8h" startline="505" endline="594">StackDump</referencedby>
        <referencedby refid="StackRigid_8h_1a3da847c6aaf3f472d56d528de1a0f6f7" compoundref="StackRigid_8h" startline="339" endline="360">StackPop</referencedby>
        <referencedby refid="StackRigid_8h_1a72e1abcd508a113d2731a622322f0624" compoundref="StackRigid_8h" startline="274" endline="305">StackPush</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a72e1abcd508a113d2731a622322f0624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackPush</definition>
        <argsstring>(__overload(StackRigid) **stack, StackElementType value)</argsstring>
        <name>StackPush</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) **</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Push the value to the stack The operation can perform reallocations if there is not enough space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be pushed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="274" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="274" bodyend="305" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="180" declcolumn="26"/>
        <references refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" compoundref="StackRigid_8h" startline="446" endline="497">__StackReallocate</references>
        <references refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" compoundref="StackRigid_8h" startline="404" endline="410">__StackUpdateChecksum</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" compoundref="StackRigid_8h" startline="88">STACK_OP_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="72">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" compoundref="StackRigid_8h" startline="80">STACK_OP_OVERFLOW</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd3730a577045e9e7d8e5ccc91b4ad60" compoundref="StackRigid_8h" startline="96">STACK_OP_PTRINVALID</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="107">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" compoundref="StackRigid_8h" startline="60">StackDumpWrapperWhy</references>
        <references refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" compoundref="StackRigid_8h" startline="383" endline="401">StackValidate</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="75">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a3da847c6aaf3f472d56d528de1a0f6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackPop</definition>
        <argsstring>(__overload(StackRigid) **stack, StackElementType *value)</argsstring>
        <name>StackPop</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) **</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Pop value from the end of the stack The operation can perform reallocations if there is too much space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be distructed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be pushed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="339" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="339" bodyend="360" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="190" declcolumn="26"/>
        <references refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" compoundref="StackRigid_8h" startline="446" endline="497">__StackReallocate</references>
        <references refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" compoundref="StackRigid_8h" startline="404" endline="410">__StackUpdateChecksum</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" compoundref="StackRigid_8h" startline="88">STACK_OP_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" compoundref="StackRigid_8h" startline="92">STACK_OP_NULL</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="72">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" compoundref="StackRigid_8h" startline="76">STACK_OP_UNDERFLOW</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="107">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" compoundref="StackRigid_8h" startline="60">StackDumpWrapperWhy</references>
        <references refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" compoundref="StackRigid_8h" startline="383" endline="401">StackValidate</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="75">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a3addcf7a8000baf1be4d91a779f293e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackDestruct</definition>
        <argsstring>(__overload(StackRigid) **stack)</argsstring>
        <name>StackDestruct</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) **</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Free stack memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be distructed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="597" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="597" bodyend="612" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="198" declcolumn="26"/>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" compoundref="StackRigid_8h" startline="92">STACK_OP_NULL</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="72">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="107">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" compoundref="StackRigid_8h" startline="499" endline="502">StackRigidMemoryUse</references>
        <references refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" compoundref="StackRigid_8h" startline="383" endline="401">StackValidate</references>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="75">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a81920cc1380e65ab9173893cb1772d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>StackRigidOperationCodes StackBack</definition>
        <argsstring>(__overload(StackRigid) *stack, StackElementType *value)</argsstring>
        <name>StackBack</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Free stack memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the outcome of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="363" column="26" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="363" bodyend="380" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="206" declcolumn="26"/>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" compoundref="StackRigid_8h" startline="88">STACK_OP_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" compoundref="StackRigid_8h" startline="92">STACK_OP_NULL</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="72">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" compoundref="StackRigid_8h" startline="76">STACK_OP_UNDERFLOW</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="107">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" compoundref="StackRigid_8h" startline="60">StackDumpWrapperWhy</references>
        <references refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" compoundref="StackRigid_8h" startline="383" endline="401">StackValidate</references>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackDump</definition>
        <argsstring>(__overload(StackRigid) *stack, const int line, const char *file, const char *why)</argsstring>
        <name>StackDump</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>why</declname>
        </param>
        <briefdescription>
<para>Dumps debug information about the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be dumped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="505" column="6" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="505" bodyend="594" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="213" declcolumn="6"/>
        <references refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" compoundref="StackRigid_8h" startline="41">__overload</references>
        <references refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" compoundref="StackRigid_8h" startline="311">memory</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" compoundref="StackRigid_8h" startline="111">STACK_ST_INTEGRITYERR</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" compoundref="StackRigid_8h" startline="119">STACK_ST_NULL</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" compoundref="StackRigid_8h" startline="107">STACK_ST_OK</references>
        <references refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" compoundref="StackRigid_8h" startline="115">STACK_ST_UNINITIALIZED</references>
        <references refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" compoundref="StackRigid_8h" startline="19">StackElementDump</references>
        <references refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" compoundref="StackRigid_8h" startline="27">StackElementType</references>
        <references refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" compoundref="StackRigid_8h" startline="499" endline="502">StackRigidMemoryUse</references>
        <references refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" compoundref="StackRigid_8h" startline="383" endline="401">StackValidate</references>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t StackRigidMemoryUse</definition>
        <argsstring>(__overload(StackRigid) *stack)</argsstring>
        <name>StackRigidMemoryUse</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Memory alocated for the Stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>alocated bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="499" column="8" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="499" bodyend="502" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="221" declcolumn="8"/>
        <references refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" compoundref="StackRigid_8h" startline="41">__overload</references>
        <references refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" compoundref="StackRigid_8h" startline="27">StackElementType</references>
        <referencedby refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" compoundref="StackRigid_8h" startline="426" endline="443">__StackGetChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" compoundref="StackRigid_8h" startline="446" endline="497">__StackReallocate</referencedby>
        <referencedby refid="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" compoundref="main_8cpp" startline="23" endline="75">main</referencedby>
        <referencedby refid="StackRigid_8h_1a3addcf7a8000baf1be4d91a779f293e8" compoundref="StackRigid_8h" startline="597" endline="612">StackDestruct</referencedby>
        <referencedby refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" compoundref="StackRigid_8h" startline="505" endline="594">StackDump</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __StackUpdateChecksum</definition>
        <argsstring>(__overload(StackRigid) *stack)</argsstring>
        <name>__StackUpdateChecksum</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Updates Stack checksums. Does not take into account bytes inside the stack but outside of its last element. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! <verbatim>* Stack memory :  [ __stack area__ | value 1, value 2, ..., value n || ___garbage area___]
* ____________________________________________________________________^ alterations in this area are not checked
* </verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack that checksums are needed to be updated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="404" column="13" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="404" bodyend="410" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="233" declcolumn="13"/>
        <references refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" compoundref="StackRigid_8h" startline="426" endline="443">__StackGetChecksum</references>
        <references refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" compoundref="StackRigid_8h" startline="413" endline="423">__StackGetChecksumVital</references>
        <referencedby refid="StackRigid_8h_1a3da847c6aaf3f472d56d528de1a0f6f7" compoundref="StackRigid_8h" startline="339" endline="360">StackPop</referencedby>
        <referencedby refid="StackRigid_8h_1a72e1abcd508a113d2731a622322f0624" compoundref="StackRigid_8h" startline="274" endline="305">StackPush</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t __StackGetChecksum</definition>
        <argsstring>(__overload(StackRigid) *stack)</argsstring>
        <name>__StackGetChecksum</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Claculates big Stack checksum. Uses Adler-32 method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! <verbatim>* Stack memory : [ checkSum checkSumVital capacity size logFile | value 1, value 2, ..., value n || ___garbage area___]
* Release:
* ________________from here ^__________________________________________________________^to here
* Debug:
* ________________from here ^______________________________________________________________________________^to here
* </verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack that checksums are needed to be updated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="426" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="426" bodyend="443" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="248" declcolumn="17"/>
        <references refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" compoundref="StackRigid_8h" startline="130" endline="138">adlerChecksum</references>
        <references refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" compoundref="StackRigid_8h" startline="311">memory</references>
        <references refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" compoundref="StackRigid_8h" startline="27">StackElementType</references>
        <references refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" compoundref="StackRigid_8h" startline="499" endline="502">StackRigidMemoryUse</references>
        <referencedby refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" compoundref="StackRigid_8h" startline="404" endline="410">__StackUpdateChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" compoundref="StackRigid_8h" startline="383" endline="401">StackValidate</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t __StackGetChecksumVital</definition>
        <argsstring>(__overload(StackRigid) *stack)</argsstring>
        <name>__StackGetChecksumVital</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Uses Adler-32 method. Calculates Stack checksum only for the vital parameters. This is necessary because <ref refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" kindref="member">__StackGetChecksum()</ref> relies on capacity and size. If they were changed, behaviour is undefined. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use!</para>
</simplesect>
<verbatim>* Stack memory : [ checkSum checkSumVital capacity size logFile | value 1, value 2, ..., value n || ___garbage area___]
* ______________________________from here ^__________________^to here
* </verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack that checksums are needed to be updated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="413" column="17" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="413" bodyend="423" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="262" declcolumn="17"/>
        <references refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" compoundref="StackRigid_8h" startline="130" endline="138">adlerChecksum</references>
        <references refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" compoundref="StackRigid_8h" startline="311">memory</references>
        <referencedby refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" compoundref="StackRigid_8h" startline="404" endline="410">__StackUpdateChecksum</referencedby>
        <referencedby refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" compoundref="StackRigid_8h" startline="383" endline="401">StackValidate</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref></type>
        <definition>static StackRigidOperationCodes __StackReallocate</definition>
        <argsstring>(__overload(StackRigid) **stack, short int direction)</argsstring>
        <name>__StackReallocate</name>
        <param>
          <type><ref refid="StackRigid_8h_1a69f8836a95e570d00f92d7140ef23dab" kindref="member">__overload</ref>(StackRigid) **</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Reallocates Stack if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Not for the manual use! </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack to be reallocated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">direction</parametername>
</parameternamelist>
<parameterdescription>
<para>which direction reallocations are available. &gt; 0 -&gt; expand space if needed, &lt; 0 -&gt; shrink space if needed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="446" column="33" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="446" bodyend="497" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="271" declcolumn="33"/>
        <references refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" compoundref="StackRigid_8h" startline="41">__overload</references>
        <references refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" compoundref="StackRigid_8h" startline="311">memory</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" compoundref="StackRigid_8h" startline="84">STACK_OP_NOMEMORY</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" compoundref="StackRigid_8h" startline="72">STACK_OP_OK</references>
        <references refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" compoundref="StackRigid_8h" startline="80">STACK_OP_OVERFLOW</references>
        <references refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" compoundref="StackRigid_8h" startline="27">StackElementType</references>
        <references refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" compoundref="StackRigid_8h" startline="499" endline="502">StackRigidMemoryUse</references>
        <referencedby refid="StackRigid_8h_1a3da847c6aaf3f472d56d528de1a0f6f7" compoundref="StackRigid_8h" startline="339" endline="360">StackPop</referencedby>
        <referencedby refid="StackRigid_8h_1a72e1abcd508a113d2731a622322f0624" compoundref="StackRigid_8h" startline="274" endline="305">StackPush</referencedby>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1abaeb1439c4195bba2f50864c768d76c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(added&lt; memory)</argsstring>
        <name>if</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="313" column="6" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="313" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a5af2775bcd740886ec307998837d87a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(!istack_pointer_valid(logFile, sizeof(logFile)))</argsstring>
        <name>if</name>
        <param>
          <type>!</type>
          <declname>istack_pointer_valid</declname>
          <array>logFile, sizeof(logFile)</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="316" column="6" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1a91b7dbe1417e55c20b6fb91b478a103c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(!istack_pointer_valid(pointer, sizeof(pointer)))</argsstring>
        <name>if</name>
        <param>
          <type>!</type>
          <declname>istack_pointer_valid</declname>
          <array>pointer, sizeof(pointer)</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="323" column="5" bodyfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" bodystart="323" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="StackRigid_8h_1aced2adff6d60187031434138a012a119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__StackUpdateChecksum</definition>
        <argsstring>(pointer)</argsstring>
        <name>__StackUpdateChecksum</name>
        <param>
          <type><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" line="334" column="5" declfile="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h" declline="334" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="18"><highlight class="preprocessor">#ifndef<sp/>StackElementDump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>StackElementDump(FILE,<sp/>VALUE)<sp/>{fprintf(FILE,<sp/>&quot;%d&quot;,<sp/>VALUE);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor">#ifndef<sp/>StackElementType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>StackElementType<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>__overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PASTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>PASTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EVALUATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>EVALUATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="StackRigid_8h_1a96e0bc8f204dbef33b6e6a664c5b5663" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PASTER(x,y)<sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>##<sp/>_<sp/>##<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="StackRigid_8h_1a90ce550ff78fd420b633c5d88dfd2883" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVALUATOR(x,y)<sp/><sp/><sp/>PASTER(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__overload(FUNC)<sp/>EVALUATOR(FUNC,<sp/>StackElementType)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>StackRigid_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="StackRigid_8h_1a1ca59cdde73826c9f67b7644f2b89392" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>StackRigid_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PointerChecks.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>StackDumpWrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>StackDumpWrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="StackRigid_8h_1a8b856f31dd10f1a46ec113d807a576e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>StackDumpWrapper(stack)<sp/>{<sp/>StackDump(stack,<sp/>__LINE__,<sp/>__FILE__,<sp/>&quot;&quot;);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>StackDumpWrapperWhy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>StackDumpWrapperWhy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>StackDumpWrapperWhy(stack,<sp/>why)<sp/>{<sp/>StackDump(stack,<sp/>__LINE__,<sp/>__FILE__,<sp/>why);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>IGNORE_VALIDITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref>{</highlight></codeline>
<codeline lineno="72" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>,</highlight></codeline>
<codeline lineno="76" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" kindref="member">STACK_OP_UNDERFLOW</ref>,</highlight></codeline>
<codeline lineno="80" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>,</highlight></codeline>
<codeline lineno="84" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>,</highlight></codeline>
<codeline lineno="88" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>,</highlight></codeline>
<codeline lineno="92" refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd3730a577045e9e7d8e5ccc91b4ad60" kindref="member">STACK_OP_PTRINVALID</ref></highlight></codeline>
<codeline lineno="97" refid="StackRigid_8h_1a2b23b57ad918293ba96140fc43194967" refkind="member"><highlight class="normal">}<sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref>{</highlight></codeline>
<codeline lineno="107" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>,</highlight></codeline>
<codeline lineno="111" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>,</highlight></codeline>
<codeline lineno="115" refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" kindref="member">STACK_ST_UNINITIALIZED</ref>,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" kindref="member">STACK_ST_NULL</ref></highlight></codeline>
<codeline lineno="120" refid="StackRigid_8h_1acc74b48b41d3ec38cb05184b602c7508" refkind="member"><highlight class="normal">}<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" kindref="member">adlerChecksum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>firstBlock,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>a<sp/>=<sp/>1,<sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>MOD_ADLER<sp/>=<sp/>65521;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>len;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)firstBlock)[index])<sp/>%<sp/>MOD_ADLER;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(b<sp/>+<sp/>a)<sp/>%<sp/>MOD_ADLER;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>a;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>StackRigid_h<sp/>general<sp/>models<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__overload(StackRigid)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a8a32205e08c87c56f05f432202831329" kindref="member">checkSum</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1abada3e312a622648ad335f352a42fb77" kindref="member">checkSumVital</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1aa778f833989c5b73d0fbe86e9b6ef977" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/><ref refid="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" kindref="member">logFile</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref><sp/>data[1];</highlight></codeline>
<codeline lineno="153"><highlight class="normal">};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" refkind="member"><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(NewStackRigid)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref>,<sp/>FILE*<sp/><ref refid="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" kindref="member">logFile</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/><ref refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" kindref="member">StackValidate</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a72e1abcd508a113d2731a622322f0624" kindref="member">StackPush</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref><sp/>value);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a3da847c6aaf3f472d56d528de1a0f6f7" kindref="member">StackPop</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>*<sp/>value);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a3addcf7a8000baf1be4d91a779f293e8" kindref="member">StackDestruct</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a81920cc1380e65ab9173893cb1772d86" kindref="member">StackBack</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack,<sp/><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>*<sp/>value);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" kindref="member">StackDump</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>why);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" kindref="member">__StackUpdateChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" kindref="member">__StackGetChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" kindref="member">__StackGetChecksumVital</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" kindref="member">__StackReallocate</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="StackRigid_8h_1a72e1abcd508a113d2731a622322f0624" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a72e1abcd508a113d2731a622322f0624" kindref="member">StackPush</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref><sp/>value){</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack)))</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd3730a577045e9e7d8e5ccc91b4ad60" kindref="member">STACK_OP_PTRINVALID</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(*stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*stack)))</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd3730a577045e9e7d8e5ccc91b4ad60" kindref="member">STACK_OP_PTRINVALID</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>integrityChecks<sp/>=<sp/><ref refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" kindref="member">StackValidate</ref>(*stack);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integrityChecks<sp/>!=<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" kindref="member">StackDumpWrapperWhy</ref>(*stack,<sp/></highlight><highlight class="stringliteral">&quot;StackPush<sp/>operation<sp/>spotted<sp/>integrity<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/>reallocResult<sp/>=<sp/><ref refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" kindref="member">__StackReallocate</ref>(stack,<sp/>1);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reallocResult<sp/>!=<sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" kindref="member">StackDumpWrapperWhy</ref>(*stack,<sp/></highlight><highlight class="stringliteral">&quot;StackPop<sp/>operation<sp/>spotted<sp/>integrity<sp/>error<sp/>during<sp/>the<sp/>reallocation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reallocResult;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>(*stack)-&gt;data[(*stack)-&gt;size]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>(*stack)-&gt;size<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" kindref="member">__StackUpdateChecksum</ref>(*stack);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*stack)-&gt;size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(NewStackRigid)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref>,<sp/>FILE*<sp/><ref refid="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" kindref="member">logFile</ref>){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="311" refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid));</highlight></codeline>
<codeline lineno="312" refid="StackRigid_8h_1abc72ff9c357136a52ae7f00fbaf9a645" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1abc72ff9c357136a52ae7f00fbaf9a645" kindref="member">added</ref><sp/>=<sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>+<sp/>(<ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref><sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="313" refid="StackRigid_8h_1abaeb1439c4195bba2f50864c768d76c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="StackRigid_8h_1abc72ff9c357136a52ae7f00fbaf9a645" kindref="member">added</ref><sp/>&lt;<sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316" refid="StackRigid_8h_1a5af2775bcd740886ec307998837d87a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(<ref refid="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" kindref="member">logFile</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" kindref="member">logFile</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>=<sp/><ref refid="StackRigid_8h_1abc72ff9c357136a52ae7f00fbaf9a645" kindref="member">added</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref><sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*)calloc(<ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323" refid="StackRigid_8h_1a91b7dbe1417e55c20b6fb91b478a103c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(<ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327" refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>-&gt;capacity<sp/>=<sp/><ref refid="StackRigid_8h_1abc869d0afb33fc960e297465165cd334" kindref="member">capacity</ref>;</highlight></codeline>
<codeline lineno="328" refid="StackRigid_8h_1aa778f833989c5b73d0fbe86e9b6ef977" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>-&gt;size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>-&gt;logFile<sp/>=<sp/><ref refid="StackRigid_8h_1a0fd979660380e3adb438912bd62e4a41" kindref="member">logFile</ref>;</highlight></codeline>
<codeline lineno="330" refid="StackRigid_8h_1a8a32205e08c87c56f05f432202831329" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>-&gt;checkSum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331" refid="StackRigid_8h_1abada3e312a622648ad335f352a42fb77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>-&gt;checkSumVital<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334" refid="StackRigid_8h_1aced2adff6d60187031434138a012a119" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" kindref="member">__StackUpdateChecksum</ref>(<ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>);</highlight></codeline>
<codeline lineno="335" refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1aa353e5db4d253654aaf3aa7725423d79" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="StackRigid_8h_1a3da847c6aaf3f472d56d528de1a0f6f7" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a3da847c6aaf3f472d56d528de1a0f6f7" kindref="member">StackPop</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack,<sp/><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack)))</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>integrityChecks<sp/>=<sp/><ref refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" kindref="member">StackValidate</ref>(*stack);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integrityChecks<sp/>!=<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" kindref="member">StackDumpWrapperWhy</ref>(*stack,<sp/></highlight><highlight class="stringliteral">&quot;StackPop<sp/>operation<sp/>spotted<sp/>integrity<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*stack)-&gt;size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" kindref="member">STACK_OP_UNDERFLOW</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>(*stack)-&gt;data[(*stack)-&gt;size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>(*stack)-&gt;size<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" kindref="member">__StackReallocate</ref>(stack,<sp/>-1);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" kindref="member">__StackUpdateChecksum</ref>(*stack);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="StackRigid_8h_1a81920cc1380e65ab9173893cb1772d86" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a81920cc1380e65ab9173893cb1772d86" kindref="member">StackBack</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack,<sp/><ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>*<sp/>value){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack)))</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>integrityChecks<sp/>=<sp/><ref refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" kindref="member">StackValidate</ref>(stack);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integrityChecks<sp/>!=<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1aa64cd9f38c32e77d367e6d5e79913bb9" kindref="member">StackDumpWrapperWhy</ref>(stack,<sp/></highlight><highlight class="stringliteral">&quot;StackBack<sp/>operation<sp/>spotted<sp/>integrity<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33" kindref="member">STACK_OP_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack-&gt;size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c" kindref="member">STACK_OP_UNDERFLOW</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>stack-&gt;data[stack-&gt;size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/><ref refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" kindref="member">StackValidate</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack)))</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" kindref="member">STACK_ST_NULL</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>&gt;<sp/>stack-&gt;capacity<sp/>||<sp/>stack-&gt;checkSum<sp/>==<sp/>0<sp/>||<sp/>stack-&gt;checkSumVital<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>IGNORE_VALIDITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>currentChecksumVital<sp/>=<sp/><ref refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" kindref="member">__StackGetChecksumVital</ref>(stack);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentChecksumVital<sp/>!=<sp/>stack-&gt;checkSumVital<sp/>||<sp/>currentChecksumVital<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>currentChecksum<sp/>=<sp/><ref refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" kindref="member">__StackGetChecksum</ref>(stack);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentChecksum<sp/>!=<sp/>stack-&gt;checkSum<sp/>||<sp/>currentChecksum<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1aafaff2554f25a2dd6681bf409da8fe8e" kindref="member">__StackUpdateChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>IGNORE_VALIDITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack-&gt;checkSumVital<sp/>=<sp/><ref refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" kindref="member">__StackGetChecksumVital</ref>(stack);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack-&gt;checkSum<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" kindref="member">__StackGetChecksum</ref>(stack);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a2a07c9f65f61c8ca3112dcfaefb4b3be" kindref="member">__StackGetChecksumVital</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>firstBlock<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)stack<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSumVital);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>=<sp/>(size_t)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(stack-&gt;data)<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)firstBlock);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>&gt;<sp/>stack-&gt;capacity)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" kindref="member">adlerChecksum</ref>(firstBlock,<sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="StackRigid_8h_1a08de7058bae2a1e0c566024850286498" kindref="member">__StackGetChecksum</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>firstBlock<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)stack<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>used<sp/>by<sp/>Stack<sp/>excluding<sp/>checkSum<sp/>and<sp/>free<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>=<sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(stack)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum)<sp/>-<sp/>(stack-&gt;capacity<sp/>-<sp/>stack-&gt;size)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>=<sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(stack)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack-&gt;checkSum);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>&gt;<sp/>stack-&gt;capacity)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a37faf27d6e9ab4e0a417f29efbda1cbb" kindref="member">adlerChecksum</ref>(firstBlock,<sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a20779cbd888e42054835b58a527bc0e8" kindref="member">__StackReallocate</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*stack)-&gt;capacity<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)-&gt;capacity<sp/>=<sp/>16;<sp/></highlight><highlight class="comment">//<sp/>capacity<sp/>if<sp/>was<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>=<sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(*stack);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>newStack<sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*)<sp/>realloc((*stack),<sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(newStack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newStack)))</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)<sp/>=<sp/>newStack;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((*stack)-&gt;capacity<sp/>&lt;=<sp/>(*stack)-&gt;size)<sp/>&amp;&amp;<sp/>direction<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Up<sp/>reallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newCapacity<sp/>=<sp/>(*stack)-&gt;size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newCapacity<sp/>&lt;=<sp/>(*stack)-&gt;size)<sp/>{<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>we<sp/>exceeded<sp/>size_t<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCapacity<sp/>=<sp/>(*stack)-&gt;size<sp/>+<sp/>16;<sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>add<sp/>16<sp/>free<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newCapacity<sp/>&lt;<sp/>(*stack)-&gt;size)<sp/></highlight><highlight class="comment">//<sp/><sp/>Even<sp/>if<sp/>in<sp/>this<sp/>case<sp/>we<sp/>still<sp/>exceed<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNow<sp/>=<sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(*stack);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNew<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid))<sp/>+<sp/>(newCapacity<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memoryNew<sp/>&gt;=<sp/>memoryNow)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>newStack<sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*)<sp/>realloc((*stack),<sp/>memoryNew);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(newStack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newStack)))</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)<sp/>=<sp/>newStack;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;<sp/></highlight><highlight class="comment">//<sp/>Exceded<sp/>size_t<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)-&gt;capacity<sp/>=<sp/>newCapacity;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((*stack)-&gt;capacity<sp/>/<sp/>2.2<sp/>&gt;<sp/>(*stack)-&gt;size)<sp/>&amp;&amp;<sp/>direction<sp/>&lt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Down<sp/>reallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newCapacity<sp/>=<sp/>(*stack)-&gt;capacity<sp/>/<sp/>2.2;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNow<sp/>=<sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(*stack);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNew<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid))<sp/>+<sp/>(newCapacity<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memoryNew<sp/>&lt;=<sp/>memoryNow)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>newStack<sp/>=<sp/>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*)<sp/>realloc((*stack),<sp/>memoryNew);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(newStack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newStack)))</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d" kindref="member">STACK_OP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)<sp/>=<sp/>newStack;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*stack)-&gt;capacity<sp/>=<sp/>newCapacity;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283" kindref="member">STACK_OP_OVERFLOW</ref>;<sp/></highlight><highlight class="comment">//<sp/>Exceded<sp/>size_t<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stack);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid))<sp/>+<sp/>(stack-&gt;capacity<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a34ed05fb570dfd9ade77d3c0bd664591" kindref="member">StackDump</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)*<sp/>stack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>why)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>rawtime<sp/>=<sp/>time(NULL);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*ptm<sp/>=<sp/>localtime(&amp;rawtime);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack))){</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stdin,<sp/></highlight><highlight class="stringliteral">&quot;\nStack<sp/>dump<sp/>is<sp/>impossible:<sp/>NULL<sp/>pointer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>output<sp/>=<sp/>stack-&gt;logFile;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(output,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(output)))<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nWarning!<sp/>Specified<sp/>dump<sp/>output<sp/>is<sp/>inavailbale!<sp/>Selecting<sp/>stdout.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;=================================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>dump<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>asctime(ptm));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Line:<sp/>%d\nFile:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line,<sp/>file);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(why[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Problem:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>why);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(istack_pointer_valid(stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack)))<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Stack<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>checks<sp/>=<sp/><ref refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" kindref="member">StackValidate</ref>(stack);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(checks)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0" kindref="member">STACK_ST_INTEGRITYERR</ref>:</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INTEGRITY<sp/>ERROR<sp/>SPOTTED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58" kindref="member">STACK_ST_UNINITIALIZED</ref>:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;UNINITIALIZED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb" kindref="member">STACK_ST_NULL</ref>:</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>POINTER&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>status);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[%p]:<sp/>{\n&quot;</highlight><highlight class="normal">,<sp/>stack);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checks<sp/>!=<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;ERROR!<sp/>Stack<sp/>structure<sp/>was<sp/>corrupted.\nThe<sp/>data<sp/>below<sp/>was<sp/>changed<sp/>from<sp/>the<sp/>outside.\nThis<sp/>can<sp/>fail!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>:<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;size);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t<sp/><sp/><sp/><sp/><sp/>capacity<sp/>:<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;capacity);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t<sp/><sp/><sp/><sp/><sp/>checkSum<sp/>:<sp/>%x\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;checkSumVital);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\tcheckSumVital<sp/>:<sp/>%x\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;checkSum);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\tdata<sp/>[%p]:<sp/>{\n&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;data);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checks<sp/>==<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stack-&gt;size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;*[%lu]<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;[%p]<sp/>&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;data<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" kindref="member">StackElementDump</ref>(stack-&gt;logFile,<sp/>stack-&gt;data[i]);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t<sp/>_______\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/><sp/>&lt;<sp/>stack-&gt;capacity)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t<sp/>[%lu]<sp/>:<sp/>GARBAGE(&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;[%p]<sp/>&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;data<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" kindref="member">StackElementDump</ref>(stack-&gt;logFile,<sp/>stack-&gt;data[i]);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack-&gt;size<sp/>+<sp/>1&lt;<sp/>stack-&gt;capacity<sp/>&amp;&amp;<sp/>stack-&gt;size<sp/>+<sp/>1<sp/>&gt;<sp/>stack-&gt;size)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\t<sp/>[%lu]<sp/>:<sp/>GARBAGE(&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;[%p]<sp/>&quot;</highlight><highlight class="normal">,<sp/>stack-&gt;data<sp/>+<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a231d62549d9cfc45a003c319b7e1779e" kindref="member">StackElementDump</ref>(stack-&gt;logFile,<sp/>stack-&gt;data[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t\tDATA<sp/>CAN&apos;T<sp/>BE<sp/>READED\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;\t}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref><sp/>=<sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(stack);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>allocated<sp/>:<sp/>%lu<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;Raw<sp/>Stack<sp/>size<sp/>:<sp/>%lu<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Element<sp/>size<sp/>:<sp/>%lu<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="StackRigid_8h_1a5d5557764da222ed9bdc5f5aba30da9d" kindref="member">StackElementType</ref>));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>Block<sp/>end<sp/>:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)stack<sp/>+<sp/><ref refid="StackRigid_8h_1a61a963e6e2f81b884bc6d17c72777b42" kindref="member">memory</ref>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(output,<sp/></highlight><highlight class="stringliteral">&quot;=================================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(NULL);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="StackRigid_8h_1a3addcf7a8000baf1be4d91a779f293e8" refkind="member"><highlight class="normal"><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039" kindref="member">StackRigidOperationCodes</ref><sp/><ref refid="StackRigid_8h_1a3addcf7a8000baf1be4d91a779f293e8" kindref="member">StackDestruct</ref>(<sp/><ref refid="StackRigid_8h_1a79ea86ebacc8d0f7906790ecd93bac28" kindref="member">__overload</ref>(StackRigid)**<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stack)))<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!istack_pointer_valid(*stack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*stack)))<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e" kindref="member">STACK_OP_NULL</ref>;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5f" kindref="member">StackRigidState</ref><sp/>checks<sp/>=<sp/><ref refid="StackRigid_8h_1a8ffebb1dd3f306eca52e8b34ad325f1c" kindref="member">StackValidate</ref>(*stack);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checks<sp/>==<sp/><ref refid="StackRigid_8h_1a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74" kindref="member">STACK_ST_OK</ref>){</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memoryNow<sp/>=<sp/><ref refid="StackRigid_8h_1a269040ce2ab02e681254d1e9f20aff35" kindref="member">StackRigidMemoryUse</ref>(*stack);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cursor<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(*stack);<sp/>cursor<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(*stack)<sp/>+<sp/>memoryNow;<sp/>cursor++)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cursor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*stack);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="StackRigid_8h_1afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e" kindref="member">STACK_OP_OK</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/aleksandrdremov/Desktop/Обучение/МФТИ/ФПМИ/Прога_1 сем/StackOnSteroids/StackOnSteroids/StackRigid.h"/>
  </compounddef>
</doxygen>
