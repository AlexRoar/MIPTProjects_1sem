<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>StackElementType</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>a5d5557764da222ed9bdc5f5aba30da9d</Anchor>
    <Abstract>Element type to be used in Stack.</Abstract>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementDump</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>a231d62549d9cfc45a003c319b7e1779e</Anchor>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementType</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>a5d5557764da222ed9bdc5f5aba30da9d</Anchor>
    <Abstract>Element type to be used in Stack.</Abstract>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>ac0f2228420376f4db7e1274f2b41667c</Anchor>
    <Abstract>Here, I try somehow to break the Stack.</Abstract>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementDump</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a231d62549d9cfc45a003c319b7e1779e</Anchor>
    <Abstract>Default element dump instruction.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementType</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a5d5557764da222ed9bdc5f5aba30da9d</Anchor>
    <Abstract>By default, it would be stack of ints.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PASTER</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a96e0bc8f204dbef33b6e6a664c5b5663</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EVALUATOR</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a90ce550ff78fd420b633c5d88dfd2883</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__overload</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a79ea86ebacc8d0f7906790ecd93bac28</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackRigidOperationCodes</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a2b23b57ad918293ba96140fc43194967</Anchor>
    <Abstract>Codes returned after operations on Stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackRigidState</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>acc74b48b41d3ec38cb05184b602c7508</Anchor>
    <Abstract>Codes characterizing Stack state.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>adlerChecksum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a37faf27d6e9ab4e0a417f29efbda1cbb</Anchor>
    <Abstract>Calculates Adler-32 checksum from the firstBlock to the firstBlock + len.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__overload</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a69f8836a95e570d00f92d7140ef23dab</Anchor>
    <Abstract>The main StackRigid struct.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackValidate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a8ffebb1dd3f306eca52e8b34ad325f1c</Anchor>
    <Abstract>Perform all stack checks: checksums, general constrains.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackPush</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a72e1abcd508a113d2731a622322f0624</Anchor>
    <Abstract>Push the value to the stack The operation can perform realocations if there is not enough space.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackPop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3da847c6aaf3f472d56d528de1a0f6f7</Anchor>
    <Abstract>Pop value from the end of the stack The operation can perform realocations if there is too much space...</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackDestruct</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3addcf7a8000baf1be4d91a779f293e8</Anchor>
    <Abstract>Free stack memory.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackBack</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a81920cc1380e65ab9173893cb1772d86</Anchor>
    <Abstract>Free stack memory.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackDump</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a0f626d8e2d3a2416a7cd0d9f9c18f0e3</Anchor>
    <Abstract>Dumps debug information about the stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackRigidMemoryUse</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a269040ce2ab02e681254d1e9f20aff35</Anchor>
    <Abstract>Memory alocated for the Stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackUpdateChecksum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>aafaff2554f25a2dd6681bf409da8fe8e</Anchor>
    <Abstract>Updates Stack checksums. Does not take into account bytes inside the stack but outside of its last el...</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackGetChecksum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a08de7058bae2a1e0c566024850286498</Anchor>
    <Abstract>Claculates big Stack checksum. Uses Adler-32 method.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackGetChecksumVital</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a2a07c9f65f61c8ca3112dcfaefb4b3be</Anchor>
    <Abstract>Uses Adler-32 method. Calculates Stack checksum only for the vital parameters. This is necessary beca...</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackRealocate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a5a6f1bf7c5c61246f70cfa0c349ad3fe</Anchor>
    <Abstract>Realocates Stack if needed.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>if</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>af56b93e9447ab919c05fdf11ac1b212b</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackUpdateChecksum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>aced2adff6d60187031434138a012a119</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>logFile</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a0fd979660380e3adb438912bd62e4a41</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>capacity</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>abc869d0afb33fc960e297465165cd334</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>aa778f833989c5b73d0fbe86e9b6ef977</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>checkSum</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a8a32205e08c87c56f05f432202831329</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>checkSumVital</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>abada3e312a622648ad335f352a42fb77</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>aa353e5db4d253654aaf3aa7725423d79</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_OK</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e</Anchor>
    <Abstract>Succesful operation.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_UNDERFLOW</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c</Anchor>
    <Abstract>Tried to get value from the empty stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_OVERFLOW</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283</Anchor>
    <Abstract>Stack overflow and new memory allocation failed.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_NOMEMORY</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d</Anchor>
    <Abstract>No memory for stack alocations.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_INTEGRITYERR</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33</Anchor>
    <Abstract>Stack memory was altered by some outer access.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_NULL</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e</Anchor>
    <Abstract>Found NULL pointer during the operation.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_OK</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74</Anchor>
    <Abstract>Stack is running as expected.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_INTEGRITYERR</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0</Anchor>
    <Abstract>Stack was altered by some outer access.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_UNINITIALIZED</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58</Anchor>
    <Abstract>Stack is uninitialized.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_NULL</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb</Anchor>
    <Abstract>Found NULL pointer during the operation.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
</Tokens>
