<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>StackElementType</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>a5d5557764da222ed9bdc5f5aba30da9d</Anchor>
    <Abstract>Element type to be used in Stack.</Abstract>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementDump</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>a231d62549d9cfc45a003c319b7e1779e</Anchor>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementType</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>a5d5557764da222ed9bdc5f5aba30da9d</Anchor>
    <Abstract>Element type to be used in Stack.</Abstract>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>main_8cpp.html</Path>
    <Anchor>ac0f2228420376f4db7e1274f2b41667c</Anchor>
    <Abstract>Here, I try somehow to break the Stack.</Abstract>
    <DeclaredIn>main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PASTER</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a96e0bc8f204dbef33b6e6a664c5b5663</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EVALUATOR</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a90ce550ff78fd420b633c5d88dfd2883</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__overload</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a2cbee6c5dd610768a24ea755d3db8ed9</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementDump</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a231d62549d9cfc45a003c319b7e1779e</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackRigidOperationCodes</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a2b23b57ad918293ba96140fc43194967</Anchor>
    <Abstract>Codes returned after operations on Stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackRigidState</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>acc74b48b41d3ec38cb05184b602c7508</Anchor>
    <Abstract>Codes characterizing Stack state.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>adlerChecksum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a37faf27d6e9ab4e0a417f29efbda1cbb</Anchor>
    <Abstract>Calculates Adler-32 checksum from the firstBlock to the firstBlock + len.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__overload</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a94083fea0de2aea65e4fb9440048f757</Anchor>
    <Abstract>The main structure.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackUpdateChecksum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a1c658f9883a1c527daca9053c4270cc3</Anchor>
    <Abstract>Updates Stack checksums. Does not take into account bytes inside the stack but outside of its last el...</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackGetChecksum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>aec5b9f98f7a764952e21338bdb33d657</Anchor>
    <Abstract>Claculates big Stack checksum. Uses Adler-32 method.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackGetChecksumVital</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>adc53f4c04137400ffb8b2b16dd7f0766</Anchor>
    <Abstract>Uses Adler-32 method. Calculates Stack checksum only for the vital parameters. This is necessary beca...</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__StackRealocate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>abebf4fe4d74c00e6c77133e0cc6aff7c</Anchor>
    <Abstract>Realocates Stack if needed.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackElementType</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>af8b6893750f868193aa85e4bdc86b200</Anchor>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackValidate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>aff7c80cd72a6cbde2bde1b740148b688</Anchor>
    <Abstract>Perform all stack checks: checksums, general constrains.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackPush</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>aa9a346debdba44a4d6d8a6d165aecba7</Anchor>
    <Abstract>Push the value to the stack The operation can perform realocations if there is not enough space.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackPop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a984cb1d53f4129fda870b57ade0d6c51</Anchor>
    <Abstract>Pop value from the end of the stack The operation can perform realocations if there is too much space...</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackDestruct</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a53fd24cced8a15cd9b5eba14c46be8bf</Anchor>
    <Abstract>Free stack memory.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackBack</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a5a14ed95132af097042c940751e1087a</Anchor>
    <Abstract>Free stack memory.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackDump</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3cda48db0043a1f64ec157f2c0235f15</Anchor>
    <Abstract>Dumps debug information about the stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StackRigidMemoryUse</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a127c18498567a23b96117f7d368c19cf</Anchor>
    <Abstract>Memory alocated for the Stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_OK</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039a049b8238cb27892165351846886d6a2e</Anchor>
    <Abstract>Succesful operation.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_UNDERFLOW</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039aba36d99a3bcd8766e93ebb89f7e2f18c</Anchor>
    <Abstract>Tried to get value from the empty stack.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_OVERFLOW</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039a3fd246337bd474e0b0be6c3db2106283</Anchor>
    <Abstract>Stack overflow and new memory allocation failed.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_NOMEMORY</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039ac5fdd9b73e4decd4f5ddca7b680c345d</Anchor>
    <Abstract>No memory for stack alocations.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_INTEGRITYERR</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039afd89a4e74adda7fac95c033ffc862a33</Anchor>
    <Abstract>Stack memory was altered by some outer access.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_OP_NULL</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>afa660da841608914d20d9819a7efe039ab949780f05a1efd2092dc9057bcf2b4e</Anchor>
    <Abstract>Found NULL pointer during the operation.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_OK</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fa4b2b5de94a6d5cbd85ca204c433b6e74</Anchor>
    <Abstract>Stack is running as expected.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_INTEGRITYERR</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fa4efc249e686cc284db2f5c3c694c94d0</Anchor>
    <Abstract>Stack was altered by some outer access.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_UNINITIALIZED</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fa61adf5622b3c4fa9e8bb422932e3ed58</Anchor>
    <Abstract>Stack is uninitialized.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STACK_ST_NULL</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>StackRigid_8h.html</Path>
    <Anchor>a3afb87b043e438be2a48ba69fe4deb5fae8a01dc716200146f1c2488155a40ecb</Anchor>
    <Abstract>Found NULL pointer during the operation.</Abstract>
    <DeclaredIn>StackRigid.h</DeclaredIn>
  </Token>
</Tokens>
